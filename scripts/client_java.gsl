.#  client_java.gsl
.#
.#  Generates a client engine for a specified protocol.
.#
.include "library.gsl"
.resolve_includes ()
.echo "Generating ../src/main/java/org/$(switches.package)/$(class.name:pascal).java..."
.output "../src/main/java/org/$(switches.package)/$(class.name:pascal).java"
/*  =========================================================================
    $(class.name:pascal).java

    Generated header for $(class.name:pascal) protocol client
    -------------------------------------------------------------------------
    $(string.trim (class->license.):block                                   )
    =========================================================================
*/

.for class.method
.   if return ?= "number"
.       method.ctype = "int"
.   elsif return ?= "string"
.       method.ctype = "String"
.   else
.       method.ctype = "void"
.   endif
.   for argument
.       if type = "string"
.       elsif type = "number"
.       else
.           echo "E: we didn't add support for $(type)s in methods"
.       endif
.   endfor
.endfor

package org.$(switches.package);

import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;
import java.util.Map;

import org.zeromq.ZMQ;
import org.zeromq.ZMQ.Socket;
import org.zeromq.ZMQ.Poller;
import org.zeromq.ZContext;
import org.zeromq.ZThread;
import org.zeromq.ZMsg;
import org.zeromq.ZFrame;

//  ---------------------------------------------------------------------
//  Structure of our front-end API class

public class $(class.name:pascal) {

    private final static int MAX_SERVERS = 256;

    ZContext ctx;        //  CZMQ context
    Socket pipe;         //  Pipe through to client

    //  The client runs as a background thread so that we can run multiple
    //  engines at once. The API talks to the client thread over an inproc
    //  pipe.


    //  --------------------------------------------------------------------------
    //  Create a new $(class.name:pascal) and a new client instance

    public $(class.name:pascal) ()
    {
        ctx = new ZContext ();
        pipe = ZThread.fork (ctx, new ClientThread ());
    }


    //  --------------------------------------------------------------------------
    //  Destroy the $(class.name:pascal) and stop the client

    public void destroy ()
    {
        pipe.send ("STOP");
        pipe.recvStr ();
        ctx.destroy ();
    }


    //  --------------------------------------------------------------------------
    //  Load client configuration data

    public void configure (final String configFile)
    {
        pipe.sendMore ("CONFIG");
        pipe.send (configFile);
    }


    //  --------------------------------------------------------------------------
    //  Set one configuration key value

    public void setoption (final String path, final String value)
    {
        pipe.sendMore ("SETOPTION");
        pipe.sendMore (path);
        pipe.send (value);
    }


    //  --------------------------------------------------------------------------
    //  Open connection to server

    public void connect (final String endpoint)
    {
        pipe.sendMore ("CONNECT");
        pipe.send (endpoint);
    }


    //  --------------------------------------------------------------------------
    //  Wait for message from API

    public ZMsg recv ()
    {
        return ZMsg.recvMsg (pipe);
    }


    //  --------------------------------------------------------------------------
    //  Return API pipe handle for polling

    public Socket handle ()
    {
        return pipe;
    }


.for class.method
    //  --------------------------------------------------------------------------

    public $(ctype) $(name:camel) (\
.   method.send = "send"
.   for argument
.       method.send = "sendMore"
.       if last ()
.           argument.send = "send"
.       else
.           argument.send = "sendMore"
.       endif
.       if type = "string"
.           argument.format = "%s"
final String $(name)\
.       elsif type = "number"
.           argument.format = "%d"
long $(name)\
.       else
.           echo "E: we didn't add support for $(type)s in methods"
.       endif
.       if last ()
.       else
,\
.       endif
.   endfor
)
    {
.   for argument where type = "string"
        assert ($(name) != null);
.   endfor
        pipe.$(send:no) ("$(NAME)");
.   for argument
.       if type = "string"
        pipe.$(send:no) (String.format("$(format)", $(name)));
.       elsif type = "number"
        pipe.$(send:no) (String.format("$(format)", $(name)));
.       endif
.   endfor
.   if defined (method.return)
        String reply = pipe.recvStr ();
.       if return = "string"
        return reply;
.       else
        int rc = Integer.parseInt (reply);
        return rc;
.       endif
.   endif
    }


.endfor
.#  Inherit defaults state, if any, to all other states
.for class.state as dstate where name = "defaults"
.   for event as devent
.       for class.state where count (event, name = devent.name) = 0
.           copy devent to state
.       endfor
.   endfor
.   delete dstate
.endfor
//  ---------------------------------------------------------------------
//  State machine constants

    private enum State {
.for class.state
        $(name:c)_state ($(index ()))$(last ()??";" ?",")
.   for event
.       for class.event as cevent where cevent.name = event.name
.       else
.           if "$(name:)" = "$(NAME)"
.               event.external = 1
.           endif
.           copy event to class
.       endfor
.   endfor
.endfor

        @SuppressWarnings ("unused")
        private final int state;
        State (int state) 
        {
            this.state = state;
        }
    };

    private enum Event {
.for class.event
        $(name:c)_event ($(index ()))$(last ()??";" ?",")
.endfor

        @SuppressWarnings ("unused")
        private final int event;
        Event (int event) 
        {
            this.event = event;
        }
    };

.if switches.animate ?= 1
//  Names for animation
    private static String [] s_state_name = {
        "",
.for class.state
        "$(Name)"$(last ()??"" ?",")
.endfor
    };

    private static String [] s_event_name = {
        "",
.for class.event
        "$(name:)"$(last ()??"" ?",")
.endfor
    };

.endif
  
.for class.declare
    $(string.trim (declare.?''):block                       )

.endfor

    //  ---------------------------------------------------------------------
    //  Context for the client thread

    private static class Client {
        //  Properties accessible to client actions
.for class.self
.   for context
        $(string.trim (context.?''):block                                      )
.   endfor
.endfor
        //  Properties you should NOT touch
        private ZContext ctx;               //  Own CZMQ context
        private Socket pipe;                //  Socket to back to caller
        private final Server [] servers;   //  Server connections
        private int nbrServers;             //  How many connections we have
        private boolean dirty;              //  If true, rebuild pollset
        private boolean stopped;            //  Has client stopped?
        private FmqConfig config;           //  Configuration tree
        private int heartbeat;              //  Heartbeat interval

        private void config ()
        {
            //  Get standard client configuration
            heartbeat = Integer.parseInt (
                config.resolve ("client/heartbeat", "1")) * 1000;
        }
        private Client (ZContext ctx, Socket pipe)
        {
            this.ctx = ctx;
            this.pipe = pipe;
            this.servers = new Server [MAX_SERVERS];
            this.config = new FmqConfig ("root", null);
            config ();

.for class.self
.   for construct
            $(string.trim (construct.?''):block                                      )
.   endfor
.endfor
        }
        private void destroy ()
        {
            if (config != null)
                config.destroy ();
            for (int serverNbr = 0; serverNbr < nbrServers; serverNbr++) {
                Server server = servers [serverNbr];
                server.destory ();
            }
.for class.self
.   for destruct
            $(string.trim (destruct.?''):block                                      )
.   endfor
.endfor
        }

        //  Apply configuration tree:
        //   * apply client configuration
        //   * print any echo items in top-level sections
        //   * apply sections that match methods

        private void applyConfig ()
        {
            //  Apply echo commands and class methods
            FmqConfig section = config.child ();
            while (section != null) {
                FmqConfig entry = section.child ();
                while (entry != null) {
                    if (entry.name ().equals ("echo"))
                        zclock_log (entry.value ());
                    entry = entry.next ();
                }
.for class.method
                if (section.name ().equals ("$(name:c)")) {
.   for argument
.       if type = "string"
                    String $(name) = section.resolve ("$(name)", "?");
.       elsif type = "number"
                    long $(name) = Long.parseLong (section.resolve ("$(name)", ""));
.       endif
.   endfor
                    $(string.trim (method.?''):block                                    )
                }
.   if !last ()
                else
.   endif
.endfor
                section = section.next ();
            }
            config ();
        }

.macro output_event_body
.   for action
.       if name = "send"
.           if switches.animate ?= 1
                        zclock_log ("C:    + send $(MESSAGE:C)");
.           endif
                        server.request.setId ($(codec:pascal).$(MESSAGE:C));
.if switches.trace ?= 1
                        zclock_log ("Send request to server");
                        $(codec)_dump (request);
.endif
                        server.request.send (server.dealer);
                        server.request = new $(codec:pascal) (0);
.       else
.           if switches.animate ?= 1
                        zclock_log ("C:    + $(name)");
.           endif
                        $(name:camel) (server);
.           if count (class.action, name = -1.name) = 0
.                echo 'E: you need to add <action name="$(name)">'
.           endif
.       endif
.   endfor
.   if defined (event.next)
                        server.state = State.$(next:c)_state;
.   endif
.endmacro
.#
.for class.action
.   if first ()
        //  Custom actions for state machine

.   endif
        private void $(name:camel) (Server server)
        {
            $(string.trim (action.?''):block                                            )
        }

.endfor
        private void controlMessage ()
        {
            ZMsg msg = ZMsg.recvMsg (pipe);
            String method = msg.popString ();
.for class.method
            if (method.equals ("$(NAME)")) {
.   for argument
.       if type = "string"
                String $(name) = msg.popString ();
.       elsif type = "number"
                long $(name) = Long.parseLong (msg.popString ());
.       endif
.   endfor
                $(string.trim (method.?''):block                                        )
.   for method.return
                $(string.trim (return.?''):block                                        )
.   endfor
.   for argument where type = "string"
.   endfor
            }
            else
.endfor
            if (method.equals ("CONFIG")) {
                String config_file = msg.popString ();
                config.destroy ();
                config = FmqConfig.load (config_file);
                if (config != null)
                    applyConfig ();
                else {
                    System.out.printf ("E: cannot load config file '%s'\\n", config_file);
                    config = new FmqConfig ("root", null);
                }
            }
            else
            if (method.equals ("SETOPTION")) {
                String path = msg.popString ();
                String value = msg.popString ();
                config.setPath (path, value);
                config ();
            }
            else
            if (method.equals ("STOP")) {
                pipe.send ("OK");
                stopped = true;
            }
            else
            if (method.equals ("CONNECT")) {
                String endpoint = msg.popString ();
                if (nbrServers < MAX_SERVERS) {
                    Server server = new Server (ctx, endpoint);
                    servers [nbrServers++] = server;
                    dirty = true;
                    serverExecute (server, Event.initialize_event);
                } else
                    System.out.printf ("E: too many server connections (max %d)\\n", MAX_SERVERS);
            }
            msg.destroy ();

        }

        //  Execute state machine as long as we have events
        private void serverExecute (Server server, Event event)
        {
            server.next_event = event;
            while (server.next_event != null) {
                event = server.next_event;
                server.next_event = null;
.if switches.animate ?= 1
                zclock_log ("C: %s:", s_state_name [server.state]);
                zclock_log ("C: (%s)", s_event_name [server.event]);
.endif
                switch (server.state) {
.for class.state
                case $(name:c)_state:
.   for event where name <> "$other"
.       if index () > 1
                    else
.       endif
                    if (event == Event.$(name:c)_event) {
.       output_event_body ()
                    }
.   endfor
.   for event where name = "$other"
                    else {
                        //  Process all other events
.       output_event_body ()
                    }
.   endfor
                    break;

.endfor
                }
.if switches.animate ?= 1
                zclock_log ("C:      -------------------> %s", s_state_name [server.state]);
.endif
            }
        }

        private void serverMessage (Server server)
        {
            if (server.reply != null)
                server.reply.destroy ();
            server.reply = FmqMsg.recv (server.dealer);
            if (server.reply == null)
                return;         //  Interrupted; do nothing
.if switches.trace ?= 1

            zclock_log ("Received reply from server");
            $(codec)_dump (server.reply);
.endif
            //  Any input from server counts as activity
            server.expires_at = System.currentTimeMillis () + heartbeat * 2;
    
.   for class.event where external ?= 1
.   if index () > 1
            else
.   endif
            if (server.reply.id () == $(codec:pascal).$(NAME:C))
                serverExecute (server, Event.$(name:c)_event);
.   endfor

        }



    }
    private static class Server {
        //  Properties accessible to server actions
        private Event next_event;           //  Next event

.for class.server
.   for context
        $(string.trim (context.?''):block                                      )
.   endfor
.endfor
        //  Properties you should NOT touch
        private final ZContext ctx;         //  Own CZMQ context
        private int index;                  //  Index into client->server_array
        private Socket dealer;              //  Socket to back to server
        private long expires_at;            //  Connection expires at
        private State state;                //  Current state
        private Event event;                //  Current event
        private final String endpoint;      //  server endpoint
        private $(codec:pascal) request;    //  Next message to send
        private $(codec:pascal) reply;      //  Last received reply

        private Server (ZContext ctx, String endpoint)
        {
            this.ctx = ctx;
            this.endpoint = endpoint;
            dealer = ctx.createSocket (ZMQ.DEALER);
            request = new $(codec:pascal) (0);
            dealer.connect (endpoint);
.for class.state where item () = 1
            state = State.$(name:c)_state;
.endfor
.for class.server
.   for construct
            $(string.trim (construct.?''):block                                         )
.   endfor
.endfor
        }

        private void destory ()
        {
            ctx.destroySocket (dealer);
            request.destroy ();
            if (reply != null)
                reply.destroy ();
.for class.server
.   for destruct
            $(string.trim (destruct.?''):block                                         )
.   endfor
.endfor
        }

    }

    //  Finally here's the client thread itself, which polls its two
    //  sockets and processes incoming messages

    private static class ClientThread 
                          implements ZThread.IAttachedRunnable {
        @Override
        public void run (Object [] args, ZContext ctx, Socket pipe)
        {
            Client self = new Client (ctx, pipe);

            while (!self.stopped && !Thread.currentThread().isInterrupted ()) {

                Poller items = ctx.getContext ().poller ();
                items.register (self.pipe, Poller.POLLIN);

                int serverNbr = 0;
                //  Rebuild pollset if we need to
                if (self.dirty) {
                    for (serverNbr = 0; serverNbr < self.nbrServers; serverNbr++) {
                        Server server = self.servers [serverNbr];
                        items.register (server.dealer, Poller.POLLIN);
                    }
                }

                if (items.poll (self.heartbeat) == -1)
                    break;              //  Context has been shut down

                //  Process incoming messages; either of these can
                //  throw events into the state machine
                if (items.pollin (0))
                    self.controlMessage ();

                //  Here, array of sockets to servers
                for (serverNbr = 0; serverNbr < self.nbrServers; serverNbr++) {
                    if (items.pollin (serverNbr + 1)) {
                        Server server = self.servers [serverNbr];
                        self.serverMessage (server);
                    }
                }
            }
            self.destroy ();
        }
    }

    public static void zclock_log (String fmt, Object ... args) 
    {
        System.out.println (String.format (fmt, args));
    }

}

.echo "Generating ../src/test/java/org/$(switches.package)/Test$(class.name:pascal).java..."
.output "../src/test/java/org/$(switches.package)/Test$(class.name:pascal).java"
/*  =========================================================================
    Test$(class.name:pascal).java

    Generated class for $(class.name:pascal) protocol client
    -------------------------------------------------------------------------
    $(string.trim (class->license.):block                                   )
    =========================================================================
*/

//  --------------------------------------------------------------------------
//  Selftest

package org.$(switches.package);

import org.junit.Test;

public class Test$(class.name:pascal)
{
    @Test
    public void test$(class.name:pascal) ()
    {
        System.out.printf (" * $(class.name:pascal): ");

        $(class.name:pascal) self;
.for class.selftest
        //  Run selftest using '$(config?'')' configuration
        self = new $(class.name:pascal) ();
        assert (self != null);
.   if defined (config)
        self.configure ("src/test/resources/$(config:)");
.   endif
.   for init
        $(string.trim (init.?''):block                                              )
.   endfor
        self.destroy ();

.endfor
        System.out.printf ("OK\\n");
    }
}
