.#  server_c.gsl
.#
.#  Generates a server engine for a specified protocol.
.#
.include "library.gsl"
.resolve_includes ()
.echo "Generating ../include/$(class.name).h..."
.output "../include/$(class.name).h"
/*  =========================================================================
    $(class.name) - $(class.title)

    Generated header for $(class.name) protocol server
    -------------------------------------------------------------------------
    $(string.trim (class->license.):block                                   )
    =========================================================================
*/

#ifndef __$(CLASS.NAME)_H_INCLUDED__
#define __$(CLASS.NAME)_H_INCLUDED__

#ifdef __cplusplus
extern "C" {
#endif

//  Opaque class structure
typedef struct _$(class.name)_t $(class.name)_t;

//  @interface
//  Create a new $(class.name)
$(class.name)_t *
    $(class.name)_new (void);

//  Destroy the $(class.name)
void
    $(class.name)_destroy ($(class.name)_t **self_p);

//  Load server configuration data
void
    $(class.name)_configure ($(class.name)_t *self, const char *config_file);

//  Set one configuration path value
void
    $(class.name)_setoption ($(class.name)_t *self, const char *path, const char *value);

.for class.method
//  $(method.text?'':)
.   if return ?= "number"
.       method.ctype = "int"
.   elsif return ?= "string"
.       method.ctype = "char *"
.   else
.       method.ctype = "void"
.   endif
$(ctype)
    $(class.name)_$(name:c) ($(class.name)_t *self\
.   for argument
.       if type = "string"
, const char *$(name)\
.       elsif type = "number"
, long $(name)\
.       else
.           echo "E: we didn't add support for $(type)s in methods"
.       endif
.   endfor
);

.endfor
//  Self test of this class
int
    $(class.name)_test (bool verbose);
//  @end

#ifdef __cplusplus
}
#endif

#endif
.echo "Generating ../src/$(class.name).c..."
.output "../src/$(class.name).c"
/*  =========================================================================
    $(class.name) - $(class.title)

    Generated class for $(class.name) protocol server
    -------------------------------------------------------------------------
    $(string.trim (class->license.):block                                   )
    =========================================================================
*/

/*
@header
    $(class.short)
@discuss
@end
*/

#include <czmq.h>
#include "../include/$(class.name).h"
#include "../include/$(class.codec).h"
#include "../include/fmq.h"

//  The server runs as a background thread so that we can run multiple
//  engines at once. The API talks to the server thread over an inproc
//  pipe.

static void
    server_thread (void *args, zctx_t *ctx, void *pipe);

//  ---------------------------------------------------------------------
//  Structure of our front-end API class

struct _$(class.name)_t {
    zctx_t *ctx;        //  CZMQ context
    void *pipe;         //  Pipe through to server
};


//  --------------------------------------------------------------------------
//  Create a new $(class.name) and a new server instance

$(class.name)_t *
$(class.name)_new (void)
{
    $(class.name)_t *self = ($(class.name)_t *) zmalloc (sizeof ($(class.name)_t));
    self->ctx = zctx_new ();
    self->pipe = zthread_fork (self->ctx, server_thread, NULL);
    return self;
}


//  --------------------------------------------------------------------------
//  Destroy the $(class.name) and stop the server

void
$(class.name)_destroy ($(class.name)_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        $(class.name)_t *self = *self_p;
        zstr_send (self->pipe, "STOP");
        char *string = zstr_recv (self->pipe);
        free (string);
        zctx_destroy (&self->ctx);
        free (self);
        *self_p = NULL;
    }
}


//  --------------------------------------------------------------------------
//  Load server configuration data
void
$(class.name)_configure ($(class.name)_t *self, const char *config_file)
{
    zstr_sendm (self->pipe, "CONFIG");
    zstr_send (self->pipe, config_file);
}


//  --------------------------------------------------------------------------
//  Set one configuration key value

void
$(class.name)_setoption ($(class.name)_t *self, const char *path, const char *value)
{
    zstr_sendm (self->pipe, "SETOPTION");
    zstr_sendm (self->pipe, path);
    zstr_send  (self->pipe, value);
}


.for class.method
//  --------------------------------------------------------------------------

$(ctype)
$(class.name)_$(name:c) ($(class.name)_t *self\
.   method.send = "send"
.   for argument
.       method.send = "sendm"
.       if last ()
.           argument.send = "sendf"
.       else
.           argument.send = "sendfm"
.       endif
.       if type = "string"
.           argument.format = "%s"
, const char *$(name)\
.       elsif type = "number"
.           argument.format = "%ld"
, long $(name)\
.       else
.           echo "E: we didn't add support for $(type)s in methods"
.       endif
.   endfor
)
{
    assert (self);
.   for argument where type = "string"
    assert ($(name));
.   endfor
    zstr_$(send) (self->pipe, "$(NAME)");
.   for argument
.       if type = "string"
    zstr_$(send) (self->pipe, "$(format)", $(name));
.       elsif type = "number"
    zstr_$(send) (self->pipe, "$(format)", $(name));
.       endif
.   endfor
.   if defined (method.return)
    char *reply = zstr_recv (self->pipe);
.       if return = "string"
    return reply;
.       else
    int rc = atoi (reply);
    free (reply);
    return rc;
.       endif
.   endif
}


.endfor
.#  Inherit defaults state, if any, to all other states
.for class.state as dstate where name = "defaults"
.   for event as devent
.       for class.state where count (event, name = devent.name) = 0
.           copy devent to state
.       endfor
.   endfor
.   delete dstate
.endfor
//  ---------------------------------------------------------------------
//  State machine constants

typedef enum {
.for class.state
    $(name:c)_state = $(index ())$(last ()??"" ?",")
.   for event
.       for class.event as cevent where cevent.name = event.name
.       else
.           if "$(name:)" = "$(NAME)"
.               event.external = 1
.           endif
.           copy event to class
.       endfor
.   endfor
.endfor
} state_t;

typedef enum {
    terminate_event = -1,
.for class.event
    $(name:c)_event = $(index ())$(last ()??"" ?",")
.endfor
} event_t;

.if switches.animate ?= 1
//  Names for animation
static char *
s_state_name [] = {
    "",
.for class.state
    "$(Name)"$(last ()??"" ?",")
.endfor
};

static char *
s_event_name [] = {
    "",
.for class.event
    "$(name:)"$(last ()??"" ?",")
.endfor
};

.endif

//  Forward declarations
typedef struct _server_t server_t;
typedef struct _client_t client_t;

.for class.declare where type ?= "forward"
$(string.trim (declare.?''):)

.endfor

//  ---------------------------------------------------------------------
//  Context for the server thread

struct _server_t {
    //  Properties accessible to server actions
.for class.self
.   for context
    $(string.trim (context.?''):block                                           )
.   endfor
.endfor
    //  Properties you should NOT touch
    zctx_t *ctx;                //  Own CZMQ context
    void *pipe;                 //  Socket to back to caller
    void *router;               //  Socket to talk to clients
    zhash_t *clients;           //  Clients we've connected to
    bool stopped;               //  Has server stopped?
    zconfig_t *config;          //  Configuration tree
    int monitor;                //  Monitor interval
    int64_t monitor_at;         //  Next monitor at this time
    int heartbeat;              //  Client heartbeat interval
};

//  ---------------------------------------------------------------------
//  Context for each client connection

struct _client_t {
    //  Properties accessible to client actions
    int heartbeat;              //  Client heartbeat interval
    event_t next_event;         //  Next event
.for class.client
.   for context
    $(string.trim (context.?''):block                                           )
.   endfor
.endfor
    //  Properties you should NOT touch
    void *router;               //  Socket to client
    int64_t heartbeat_at;       //  Next heartbeat at this time
    int64_t expires_at;         //  Expires at this time
    state_t state;              //  Current state
    event_t event;              //  Current event
    char *hashkey;              //  Key into clients hash
    zframe_t *address;          //  Client address identity
    $(codec)_t *request;        //  Last received request
    $(codec)_t *reply;          //  Reply to send out, if any
};

static void
server_client_execute (server_t *server, client_t *client, int event);

.for class.declare where !defined (type)
$(string.trim (declare.?''):)

.endfor

//  Client methods

static client_t *
client_new (zframe_t *address)
{
    client_t *self = (client_t *) zmalloc (sizeof (client_t));
.for class.state where item () = 1
    self->state = $(name:c)_state;
.endfor
    self->hashkey = zframe_strhex (address);
    self->address = zframe_dup (address);
    self->reply = $(codec)_new (0);
    $(codec)_set_address (self->reply, self->address);
.for class.client
.   for construct
    $(string.trim (construct.?''):block                                         )
.   endfor
.endfor
    return self;
}

static void
client_destroy (client_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        client_t *self = *self_p;
        zframe_destroy (&self->address);
        $(codec)_destroy (&self->request);
        $(codec)_destroy (&self->reply);
        free (self->hashkey);
.for class.client
.   for destruct
        $(string.trim (destruct.?''):block                                      )
.   endfor
.endfor
        free (self);
        *self_p = NULL;
    }
}

//  Callback when we remove client from 'clients' hash table
static void
client_free (void *argument)
{
    client_t *client = (client_t *) argument;
    client_destroy (&client);
}

//  Client hash function that calculates tickless timer
static int
client_tickless (const char *key, void *client, void *argument)
{
    client_t *self = (client_t *) client;
    uint64_t *tickless = (uint64_t *) argument;
    if (*tickless > self->heartbeat_at)
        *tickless = self->heartbeat_at;
    return 0;
}

//  Client hash function that checks if client is alive
static int
client_ping (const char *key, void *client, void *argument)
{
    client_t *self = (client_t *) client;
    //  Expire client if it's not answered us in a while
    if (zclock_time () >= self->expires_at && self->expires_at) {
        //  In case dialog doesn't handle expired_event by destroying
        //  client, set expires_at to zero to prevent busy looping
        self->expires_at = 0;
        server_client_execute ((server_t *) argument, self, expired_event);
    }
    else
    //  Check whether to send heartbeat to client
    if (zclock_time () >= self->heartbeat_at) {
        server_client_execute ((server_t *) argument, self, heartbeat_event);
        self->heartbeat_at = zclock_time () + self->heartbeat;
    }
    return 0;
}

//  Server methods

static void
server_config_self (server_t *self)
{
    //  Get standard server configuration
    self->monitor = atoi (
        zconfig_resolve (self->config, "server/monitor", "1")) * 1000;
    self->heartbeat = atoi (
        zconfig_resolve (self->config, "server/heartbeat", "1")) * 1000;
    self->monitor_at = zclock_time () + self->monitor;
}

static server_t *
server_new (zctx_t *ctx, void *pipe)
{
    server_t *self = (server_t *) zmalloc (sizeof (server_t));
    self->ctx = ctx;
    self->pipe = pipe;
    self->router = zsocket_new (self->ctx, ZMQ_ROUTER);
    self->clients = zhash_new ();
    self->config = zconfig_new ("root", NULL);
    server_config_self (self);
.for class.self
.   for construct
    $(string.trim (construct.?''):block                                         )
.   endfor
.endfor
    return self;
}

static void
server_destroy (server_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        server_t *self = *self_p;
        zsocket_destroy (self->ctx, self->router);
        zconfig_destroy (&self->config);
        zhash_destroy (&self->clients);
.for class.self
.   for destruct
        $(string.trim (destruct.?''):block                                      )
.   endfor
.endfor
        free (self);
        *self_p = NULL;
    }
}

//  Apply configuration tree:
//   * apply server configuration
//   * print any echo items in top-level sections
//   * apply sections that match methods
static void
server_apply_config (server_t *self)
{
    //  Apply echo commands and class methods
    zconfig_t *section = zconfig_child (self->config);
    while (section) {
        zconfig_t *entry = zconfig_child (section);
        while (entry) {
            if (streq (zconfig_name (entry), "echo"))
                zclock_log (zconfig_value (entry));
            entry = zconfig_next (entry);
        }
.for class.method where count (argument) > 0
        if (streq (zconfig_name (section), "$(name:c)")) {
.   for argument
.       if type = "string"
            char *$(name) = zconfig_resolve (section, "$(name)", "?");
.       elsif type = "number"
            long $(name) = atoi (zconfig_resolve (section, "$(name)", ""));
.       endif
.   endfor
            $(string.trim (method.?''):block                                    )
        }
.   if !last ()
        else
.   endif
.endfor
        section = zconfig_next (section);
    }
    server_config_self (self);
}

//  Process message from pipe
static void
server_control_message (server_t *self)
{
    zmsg_t *msg = zmsg_recv (self->pipe);
    char *method = zmsg_popstr (msg);
.for class.method
    if (streq (method, "$(NAME)")) {
.   for argument
.       if type = "string"
        char *$(name) = zmsg_popstr (msg);
.       elsif type = "number"
        char *$(name)_string = zmsg_popstr (msg);
        long $(name) = atoi ($(name)_string);
        free ($(name)_string);
.       endif
.   endfor
        $(string.trim (method.?''):block                                        )
.   for method.return
        $(string.trim (return.?''):block                                        )
.   endfor
.   for argument where type = "string"
        free ($(name));
.   endfor        
    }
    else
.endfor
    if (streq (method, "CONFIG")) {
        char *config_file = zmsg_popstr (msg);
        zconfig_destroy (&self->config);
        self->config = zconfig_load (config_file);
        if (self->config)
            server_apply_config (self);
        else {
            printf ("E: cannot load config file '%s'\\n", config_file);
            self->config = zconfig_new ("root", NULL);
        }
        free (config_file);
    }
    else
    if (streq (method, "SETOPTION")) {
        char *path = zmsg_popstr (msg);
        char *value = zmsg_popstr (msg);
        zconfig_put (self->config, path, value);
        server_config_self (self);
        free (path);
        free (value);
    }
    else
    if (streq (method, "STOP")) {
        zstr_send (self->pipe, "OK");
        self->stopped = true;
    }
    free (method);
    zmsg_destroy (&msg);
}

.macro output_event_body
.   for action
.       if name = "send"
.           if switches.animate ?= 1
                    zclock_log ("S:    + send $(MESSAGE:C)");
.           endif
                    $(codec)_set_id (client->reply, $(CODEC)_$(MESSAGE:C));
.if switches.trace ?= 1
                    zclock_log ("Send message to client");
                    $(codec)_dump (client->reply);
.endif
                    $(codec)_send (&client->reply, client->router);
                    client->reply = $(codec)_new (0);
                    $(codec)_set_address (client->reply, client->address);
.       else
.           if switches.animate ?= 1
                    zclock_log ("S:    + $(name)");
.           endif
                    $(name:c) (self, client);
.           if count (class.action, name = -1.name) = 0
.               echo 'E: you need to add <action name="$(name)">'
.           endif
.       endif
.   endfor
.   if defined (event.next)
                    client->state = $(next:c)_state;
.   endif
.endmacro
.#
.for class.action
.   if first ()
//  Custom actions for state machine

.   endif
static void
$(name:c) (server_t *self, client_t *client)
{
    $(string.trim (action.?''):block                                            )
}

.endfor
//  Execute state machine as long as we have events
static void
server_client_execute (server_t *self, client_t *client, int event)
{
    client->next_event = event;
    while (client->next_event) {
        client->event = client->next_event;
        client->next_event = 0;
.if switches.animate ?= 1
        zclock_log ("S: %s:", s_state_name [client->state]);
        zclock_log ("S: (%s)", s_event_name [client->event]);
.endif
        switch (client->state) {
.for class.state
            case $(name:c)_state:
.   for event where name <> "$other"
.       if index () > 1
                else
.       endif
                if (client->event == $(name:c)_event) {
.       output_event_body ()
                }
.   endfor
.   for event where name = "$other"
                else {
                    //  Process all other events
.       output_event_body ()
                }
.   endfor
                break;

.endfor
        }
.if switches.animate ?= 1
        zclock_log ("S:      -------------------> %s", s_state_name [client->state]);
.endif
        if (client->next_event == terminate_event) {
            //  Automatically calls client_destroy
            zhash_delete (self->clients, client->hashkey);
            break;
        }
    }
}

static void
server_client_message (server_t *self)
{
    $(codec)_t *request = $(codec)_recv (self->router);
    if (!request)
        return;         //  Interrupted; do nothing

.if switches.trace ?= 1
    zclock_log ("Received message from client");
    $(codec)_dump (request);
.endif
    char *hashkey = zframe_strhex ($(codec)_address (request));
    client_t *client = zhash_lookup (self->clients, hashkey);
    if (client == NULL) {
        client = client_new ($(codec)_address (request));
        client->heartbeat = self->heartbeat;
        client->router = self->router;
        zhash_insert (self->clients, hashkey, client);
        zhash_freefn (self->clients, hashkey, client_free);
    }
    free (hashkey);
    if (client->request)
        $(codec)_destroy (&client->request);
    client->request = request;

    //  Any input from client counts as heartbeat
    client->heartbeat_at = zclock_time () + client->heartbeat;
    //  Any input from client counts as activity
    client->expires_at = zclock_time () + client->heartbeat * 3;
    
.   for class.event where external ?= 1
.   if index () > 1
    else
.   endif
    if ($(codec)_id (request) == $(CODEC)_$(NAME:C))
        server_client_execute (self, client, $(name:c)_event);
.   endfor
}

//  Finally here's the server thread itself, which polls its two
//  sockets and processes incoming messages
static void
server_thread (void *args, zctx_t *ctx, void *pipe)
{
    server_t *self = server_new (ctx, pipe);
    zmq_pollitem_t items [] = {
        { self->pipe, 0, ZMQ_POLLIN, 0 },
        { self->router, 0, ZMQ_POLLIN, 0 }
    };
    self->monitor_at = zclock_time () + self->monitor;
    while (!self->stopped && !zctx_interrupted) {
        //  Calculate tickless timer, up to interval seconds
        uint64_t tickless = zclock_time () + self->monitor;
        zhash_foreach (self->clients, client_tickless, &tickless);

        //  Poll until at most next timer event
        int rc = zmq_poll (items, 2,
            (tickless - zclock_time ()) * ZMQ_POLL_MSEC);
        if (rc == -1)
            break;              //  Context has been shut down

        //  Process incoming message from either socket
        if (items [0].revents & ZMQ_POLLIN)
            server_control_message (self);

        if (items [1].revents & ZMQ_POLLIN)
            server_client_message (self);

        //  Send heartbeats to idle clients as needed
        zhash_foreach (self->clients, client_ping, self);

        //  If clock went past timeout, then monitor server
        if (zclock_time () >= self->monitor_at) {
.   if count (class.action, name = "monitor the server")
            monitor_the_server (self, NULL);
.   endif
            self->monitor_at = zclock_time () + self->monitor;
        }
    }
    server_destroy (&self);
}


//  --------------------------------------------------------------------------
//  Selftest

int
$(class.name)_test (bool verbose)
{
    printf (" * $(class.name): ");
.if switches.trace ?= 1 | switches.animate ?= 1
    printf ("\\n");
.else
    fflush (stdout);
.endif
    zctx_t *ctx = zctx_new ();
    
    $(class.name)_t *self;
    void *dealer = zsocket_new (ctx, ZMQ_DEALER);
    zsocket_set_rcvtimeo (dealer, 2000);
    zsocket_connect (dealer, "tcp://localhost:5670");
    
    $(codec)_t *request, *reply;
    
.for class.selftest
    //  Run selftest using '$(config?'')' configuration
    self = $(class.name)_new ();
    assert (self);
.   if defined (config)
    $(class.name)_configure (self, "$(config:)");
.   endif
.   for init
    $(string.trim (init.?''):block                                              )
.   endfor
.   for step
.       if defined (send)
    request = $(codec)_new ($(CODEC)_$(SEND:C));
.           if defined (step.)
    $(string.trim (step.?''):block                                              )
.           endif
    $(codec)_send (&request, dealer);
.       endif
.       if defined (recv)
    reply = $(codec)_recv (dealer);
    assert (reply);
    assert ($(codec)_id (reply) == $(CODEC)_$(RECV:C));
    $(codec)_destroy (&reply);
.       endif
.       if defined (pause)
    sleep ($(pause));
.       endif

.   endfor
    $(class.name)_destroy (&self);
.endfor

    zctx_destroy (&ctx);
    //  @end

    //  No clean way to wait for a background thread to exit
    //  Under valgrind this will randomly show as leakage
    //  Reduce this by giving server thread time to exit
    zclock_sleep (200);
    printf ("OK\\n");
    return 0;
}
