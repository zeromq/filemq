.#  client_c.gsl
.#
.#  Generates a client engine for a specified protocol.
.#
.include "library.gsl"
.resolve_includes ()
.echo "Generating ../include/$(class.name).h..."
.output "../include/$(class.name).h"
/*  =========================================================================
    $(class.name) - $(class.title)

    Generated header for $(class.name) protocol client
    -------------------------------------------------------------------------
    $(string.trim (class->license.):block                                   )
    =========================================================================
*/

#ifndef __$(CLASS.NAME)_H_INCLUDED__
#define __$(CLASS.NAME)_H_INCLUDED__

#ifdef __cplusplus
extern "C" {
#endif

//  Opaque class structure
typedef struct _$(class.name)_t $(class.name)_t;

//  @interface
//  Create a new $(class.name)
$(class.name)_t *
    $(class.name)_new (void);

//  Destroy the $(class.name)
void
    $(class.name)_destroy ($(class.name)_t **self_p);

//  Load client configuration data
void
    $(class.name)_configure ($(class.name)_t *self, const char *config_file);

//  Set one configuration key value
void
    $(class.name)_setoption ($(class.name)_t *self, const char *path, const char *value);

//  Create outgoing connection to server
void
    $(class.name)_connect ($(class.name)_t *self, const char *endpoint);

//  Wait for message from API
zmsg_t *
    $(class.name)_recv ($(class.name)_t *self);

//  Return API pipe handle for polling
void *
    $(class.name)_handle ($(class.name)_t *self);

.for class.method
//  $(method.text?'':)
.   if return ?= "number"
.       method.ctype = "int"
.   elsif return ?= "string"
.       method.ctype = "char *"
.   else
.       method.ctype = "void"
.   endif
$(ctype)
    $(class.name)_$(name:c) ($(class.name)_t *self\
.   for argument
.       if type = "string"
, const char *$(name)\
.       elsif type = "number"
, long $(name)\
.       else
.           echo "E: we didn't add support for $(type)s in methods"
.       endif
.   endfor
);

.endfor
//  Self test of this class
int
    $(class.name)_test (bool verbose);
//  @end

#ifdef __cplusplus
}
#endif

#endif
.echo "Generating ../src/$(class.name).c..."
.output "../src/$(class.name).c"
/*  =========================================================================
    $(class.name) - $(class.title)

    Generated class for $(class.name) protocol client
    -------------------------------------------------------------------------
    $(string.trim (class->license.):block                                   )
    =========================================================================
*/

/*
@header
  $(class.short)
@discuss
@end
*/

#include <czmq.h>
#include "../include/$(class.name).h"
#include "../include/$(class.codec).h"
#include "../include/fmq.h"

//  The client runs as a background thread so that we can run multiple
//  engines at once. The API talks to the client thread over an inproc
//  pipe.

static void
    client_thread (void *args, zctx_t *ctx, void *pipe);

//  ---------------------------------------------------------------------
//  Structure of our front-end API class

struct _$(class.name)_t {
    zctx_t *ctx;        //  CZMQ context
    void *pipe;         //  Pipe through to client
};


//  --------------------------------------------------------------------------
//  Create a new $(class.name) and a new client instance

$(class.name)_t *
$(class.name)_new (void)
{
    $(class.name)_t *self = ($(class.name)_t *) zmalloc (sizeof ($(class.name)_t));
    self->ctx = zctx_new ();
    self->pipe = zthread_fork (self->ctx, client_thread, NULL);
    return self;
}


//  --------------------------------------------------------------------------
//  Destroy the $(class.name) and stop the client

void
$(class.name)_destroy ($(class.name)_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        $(class.name)_t *self = *self_p;
        zstr_send (self->pipe, "STOP");
        char *string = zstr_recv (self->pipe);
        free (string);
        zctx_destroy (&self->ctx);
        free (self);
        *self_p = NULL;
    }
}


//  --------------------------------------------------------------------------
//  Load client configuration data

void
$(class.name)_configure ($(class.name)_t *self, const char *config_file)
{
    zstr_sendm (self->pipe, "CONFIG");
    zstr_send  (self->pipe, config_file);
}


//  --------------------------------------------------------------------------
//  Set one configuration key value

void
$(class.name)_setoption ($(class.name)_t *self, const char *path, const char *value)
{
    zstr_sendm (self->pipe, "SETOPTION");
    zstr_sendm (self->pipe, path);
    zstr_send  (self->pipe, value);
}


//  --------------------------------------------------------------------------
//  Create outgoing connection to server

void
$(class.name)_connect ($(class.name)_t *self, const char *endpoint)
{
    zstr_sendm (self->pipe, "CONNECT");
    zstr_send  (self->pipe, endpoint);
}


//  --------------------------------------------------------------------------
//  Wait for message from API

zmsg_t *
$(class.name)_recv ($(class.name)_t *self)
{
    zmsg_t *msg = zmsg_recv (self->pipe);
    return msg;
}


//  --------------------------------------------------------------------------
//  Return API pipe handle for polling

void *
$(class.name)_handle ($(class.name)_t *self)
{
    return self->pipe;
}


.for class.method
//  --------------------------------------------------------------------------

$(ctype)
$(class.name)_$(name:c) ($(class.name)_t *self\
.   method.send = "send"
.   for argument
.       method.send = "sendm"
.       if last ()
.           argument.send = "sendf"
.       else
.           argument.send = "sendfm"
.       endif
.       if type = "string"
.           argument.format = "%s"
, const char *$(name)\
.       elsif type = "number"
.           argument.format = "%ld"
, long $(name)\
.       else
.           echo "E: we didn't add support for $(type)s in methods"
.       endif
.   endfor
)
{
    assert (self);
.   for argument where type = "string"
    assert ($(name));
.   endfor
    zstr_$(send) (self->pipe, "$(NAME)");
.   for argument
.       if type = "string"
    zstr_$(send) (self->pipe, "$(format)", $(name));
.       elsif type = "number"
    zstr_$(send) (self->pipe, "$(format)", $(name));
.       endif
.   endfor
.   if defined (method.return)
    char *reply = zstr_recv (self->pipe);
.       if return = "string"
    return reply;
.       else
    int rc = atoi (reply);
    free (reply);
    return rc;
.       endif
.   endif
}


.endfor
.#  Inherit defaults state, if any, to all other states
.for class.state as dstate where name = "defaults"
.   for event as devent
.       for class.state where count (event, name = devent.name) = 0
.           copy devent to state
.       endfor
.   endfor
.   delete dstate
.endfor
//  ---------------------------------------------------------------------
//  State machine constants

typedef enum {
.for class.state
    $(name:c)_state = $(index ())$(last ()??"" ?",")
.   for event
.       for class.event as cevent where cevent.name = event.name
.       else
.           if "$(name:)" = "$(NAME)"
.               event.external = 1
.           endif
.           copy event to class
.       endfor
.   endfor
.endfor
} state_t;

typedef enum {
.for class.event
    $(name:c)_event = $(index ())$(last ()??"" ?",")
.endfor
} event_t;

.if switches.animate ?= 1
//  Names for animation
static char *
s_state_name [] = {
    "",
.for class.state
    "$(Name)"$(last ()??"" ?",")
.endfor
};

static char *
s_event_name [] = {
    "",
.for class.event
    "$(name:)"$(last ()??"" ?",")
.endfor
};

.endif

//  Maximum number of server connections we allow
#define MAX_SERVERS     256

//  Forward declarations
typedef struct _client_t client_t;
typedef struct _server_t server_t;

.for class.declare where type ?= "forward"
$(string.trim (declare.?''):)

.endfor

//  ---------------------------------------------------------------------
//  Context for the client thread

struct _client_t {
    //  Properties accessible to client actions
.for class.self
.   for context
    $(string.trim (context.?''):block                                           )
.   endfor
.endfor
    //  Properties you should NOT touch
    zctx_t *ctx;                //  Own CZMQ context
    void *pipe;                 //  Socket to back to caller
    server_t *servers [MAX_SERVERS];
                                //  Server connections
    uint nbr_servers;           //  How many connections we have
    bool dirty;                 //  If true, rebuild pollset
    bool stopped;               //  Is the client stopped?
    zconfig_t *config;          //  Configuration tree
    int heartbeat;              //  Heartbeat interval
};

//  ---------------------------------------------------------------------
//  Context for each server connection

struct _server_t {
    //  Properties accessible to server actions
    event_t next_event;         //  Next event
.for class.server
.   for context
    $(string.trim (context.?''):block                                           )
.   endfor
.endfor
    //  Properties you should NOT touch
    zctx_t *ctx;                //  Own CZMQ context
    uint index;                 //  Index into client->server_array
    void *dealer;               //  Socket to talk to server
    int64_t expires_at;         //  Connection expires at
    state_t state;              //  Current state
    event_t event;              //  Current event
    char *endpoint;             //  Server endpoint
    $(codec)_t *request;        //  Next message to send
    $(codec)_t *reply;          //  Last received reply
};

static void
client_server_execute (client_t *self, server_t *server, int event);

.for class.declare where !defined (type)
$(string.trim (declare.?''):)

.endfor

//  Server methods

static server_t *
server_new (zctx_t *ctx, char *endpoint)
{
    server_t *self = (server_t *) zmalloc (sizeof (server_t));
    self->ctx = ctx;
    self->endpoint = strdup (endpoint);
    self->dealer = zsocket_new (self->ctx, ZMQ_DEALER);
    self->request = $(codec)_new (0);
    zsocket_connect (self->dealer, endpoint);
.for class.state where item () = 1
    self->state = $(name:c)_state;
.endfor
.for class.server
.   for construct
    $(string.trim (construct.?''):block                                         )
.   endfor
.endfor
    return self;
}

static void
server_destroy (server_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        server_t *self = *self_p;
        zsocket_destroy (self->ctx, self->dealer);
        $(codec)_destroy (&self->request);
        $(codec)_destroy (&self->reply);
        free (self->endpoint);
.for class.server
.   for destruct
        $(string.trim (destruct.?''):block                                      )
.   endfor
.endfor
        free (self);
        *self_p = NULL;
    }
}

//  Client methods

static void
client_config_self (client_t *self)
{
    //  Get standard client configuration
    self->heartbeat = atoi (
        zconfig_resolve (self->config, "client/heartbeat", "1")) * 1000;
}

static client_t *
client_new (zctx_t *ctx, void *pipe)
{
    client_t *self = (client_t *) zmalloc (sizeof (client_t));
    self->ctx = ctx;
    self->pipe = pipe;
    self->config = zconfig_new ("root", NULL);
    client_config_self (self);
.for class.self
.   for construct
    $(string.trim (construct.?''):block                                         )
.   endfor
.endfor
    return self;
}

static void
client_destroy (client_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        client_t *self = *self_p;
        zconfig_destroy (&self->config);
        int server_nbr;
        for (server_nbr = 0; server_nbr < self->nbr_servers; server_nbr++) {
            server_t *server = self->servers [server_nbr];
            server_destroy (&server);
        }
.for class.self
.   for destruct
        $(string.trim (destruct.?''):block                                      )
.   endfor
.endfor
        free (self);
        *self_p = NULL;
    }
}

//  Apply configuration tree:
//   * apply client configuration
//   * print any echo items in top-level sections
//   * apply sections that match methods
static void
client_apply_config (client_t *self)
{
    //  Apply echo commands and class methods
    zconfig_t *section = zconfig_child (self->config);
    while (section) {
        zconfig_t *entry = zconfig_child (section);
        while (entry) {
            if (streq (zconfig_name (entry), "echo"))
                zclock_log (zconfig_value (entry));
            entry = zconfig_next (entry);
        }
.for class.method where count (argument) > 0
        if (streq (zconfig_name (section), "$(name:c)")) {
.   for argument
.       if type = "string"
            char *$(name) = zconfig_resolve (section, "$(name)", "?");
.       elsif type = "number"
            long $(name) = atoi (zconfig_resolve (section, "$(name)", ""));
.       endif
.   endfor
            $(string.trim (method.?''):block                                    )
        }
.   if !last ()
        else
.   endif
.endfor
        section = zconfig_next (section);
    }
    client_config_self (self);
}

//  Process message from pipe
static void
client_control_message (client_t *self)
{
    zmsg_t *msg = zmsg_recv (self->pipe);
    char *method = zmsg_popstr (msg);
.for class.method
    if (streq (method, "$(NAME)")) {
.   for argument
.       if type = "string"
        char *$(name) = zmsg_popstr (msg);
.       elsif type = "number"
        char *$(name)_string = zmsg_popstr (msg);
        long $(name) = atoi ($(name)_string);
        free ($(name)_string);
.       endif
.   endfor
        $(string.trim (method.?''):block                                        )
.   for method.return
        $(string.trim (return.?''):block                                        )
.   endfor
.   for argument where type = "string"
        free ($(name));
.   endfor
    }
    else
.endfor
    if (streq (method, "CONFIG")) {
        char *config_file = zmsg_popstr (msg);
        zconfig_destroy (&self->config);
        self->config = zconfig_load (config_file);
        if (self->config)
            client_apply_config (self);
        else {
            printf ("E: cannot load config file '%s'\\n", config_file);
            self->config = zconfig_new ("root", NULL);
        }
        free (config_file);
    }
    else
    if (streq (method, "SETOPTION")) {
        char *path = zmsg_popstr (msg);
        char *value = zmsg_popstr (msg);
        zconfig_put (self->config, path, value);
        client_config_self (self);
        free (path);
        free (value);
    }
    else
    if (streq (method, "STOP")) {
        zstr_send (self->pipe, "OK");
        self->stopped = true;
    }
    else
    if (streq (method, "CONNECT")) {
        char *endpoint = zmsg_popstr (msg);
        if (self->nbr_servers < MAX_SERVERS) {
            server_t *server = server_new (self->ctx, endpoint);
            self->servers [self->nbr_servers++] = server;
            self->dirty = true;
            client_server_execute (self, server, initialize_event);
        }
        else
            printf ("E: too many server connections (max %d)\\n", MAX_SERVERS);
            
        free (endpoint);
    }
    free (method);
    zmsg_destroy (&msg);
}

.macro output_event_body
.   for action
.       if name = "send"
.           if switches.animate ?= 1
                    zclock_log ("C:    + send $(MESSAGE:C)");
.           endif
                    $(codec)_set_id (server->request, $(CODEC)_$(MESSAGE:C));
.if switches.trace ?= 1
                    zclock_log ("Send request to server");
                    $(codec)_dump (server->request);
.endif
                    $(codec)_send (&server->request, server->dealer);
                    server->request = $(codec)_new (0);
.       else
.           if switches.animate ?= 1
                    zclock_log ("C:    + $(name)");
.           endif
                    $(name:c) (self, server);
.           if count (class.action, name = -1.name) = 0
.                echo 'E: you need to add <action name="$(name)">'
.           endif
.       endif
.   endfor
.   if defined (event.next)
                    server->state = $(next:c)_state;
.   endif
.endmacro
.#
.for class.action
.   if first ()
//  Custom actions for state machine

.   endif
static void
$(name:c) (client_t *self, server_t *server)
{
    $(string.trim (action.?''):block                                            )
}

.endfor
//  Execute state machine as long as we have events
static void
client_server_execute (client_t *self, server_t *server, int event)
{
    server->next_event = event;
    while (server->next_event) {
        server->event = server->next_event;
        server->next_event = 0;
.if switches.animate ?= 1
        zclock_log ("C: %s:", s_state_name [server->state]);
        zclock_log ("C: (%s)", s_event_name [server->event]);
.endif
        switch (server->state) {
.for class.state
            case $(name:c)_state:
.   for event where name <> "$other"
.       if index () > 1
                else
.       endif
                if (server->event == $(name:c)_event) {
.       output_event_body ()
                }
.   endfor
.   for event where name = "$other"
                else {
                    //  Process all other events
.       output_event_body ()
                }
.   endfor
                break;

.endfor
        }
.if switches.animate ?= 1
        zclock_log ("C:      -------------------> %s", s_state_name [server->state]);
.endif
    }
}

static void
client_server_message (client_t *self, server_t *server)
{
    if (server->reply)
        $(codec)_destroy (&server->reply);
    server->reply = $(codec)_recv (server->dealer);
    if (!server->reply)
        return;         //  Interrupted; do nothing

.if switches.trace ?= 1
    zclock_log ("Received reply from server");
    $(codec)_dump (server->reply);
.endif
    //  Any input from server counts as activity
    server->expires_at = zclock_time () + self->heartbeat * 3;
    
.   for class.event where external ?= 1
.   if index () > 1
    else
.   endif
    if ($(codec)_id (server->reply) == $(CODEC)_$(NAME:C))
        client_server_execute (self, server, $(name:c)_event);
.   endfor
}

//  Finally here's the client thread itself, which polls its two
//  sockets and processes incoming messages
static void
client_thread (void *args, zctx_t *ctx, void *pipe)
{
    client_t *self = client_new (ctx, pipe);
    int pollset_size = 1;
    zmq_pollitem_t pollset [MAX_SERVERS] = {
        { self->pipe, 0, ZMQ_POLLIN, 0 }
    };
    while (!self->stopped && !zctx_interrupted) {
        //  Rebuild pollset if we need to
        int server_nbr;
        if (self->dirty) {
            for (server_nbr = 0; server_nbr < self->nbr_servers; server_nbr++) {
                pollset [1 + server_nbr].socket = self->servers [server_nbr]->dealer;
                pollset [1 + server_nbr].events = ZMQ_POLLIN;
            }
            pollset_size = 1 + self->nbr_servers;
        }
        if (zmq_poll (pollset, pollset_size, self->heartbeat * ZMQ_POLL_MSEC) == -1)
            break;              //  Context has been shut down

        //  Process incoming messages; either of these can
        //  throw events into the state machine
        if (pollset [0].revents & ZMQ_POLLIN)
            client_control_message (self);

        //  Here, array of sockets to servers
        for (server_nbr = 0; server_nbr < self->nbr_servers; server_nbr++) {
            if (pollset [1 + server_nbr].revents & ZMQ_POLLIN) {
                server_t *server = self->servers [server_nbr];
                client_server_message (self, server);
            }
        }
    }
    client_destroy (&self);
}


//  --------------------------------------------------------------------------
//  Selftest

int
$(class.name)_test (bool verbose)
{
    printf (" * $(class.name): ");

    //  @selftest
    $(class.name)_t *self;
.for class.selftest
    //  Run selftest using '$(config?'')' configuration
    self = $(class.name)_new ();
    assert (self);
.   if defined (config)
    $(class.name)_configure (self, "$(config:)");
.   endif
.   for init
    $(string.trim (init.?''):block                                              )
.   endfor
    $(class.name)_destroy (&self);

.endfor
    //  @end

    printf ("OK\\n");
    return 0;
}
