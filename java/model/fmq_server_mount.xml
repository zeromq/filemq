<declare>
//  --------------------------------------------------------------------------
//  Mount point in memory

private static class Mount {
    private String location;        //  Physical location
    private String alias;           //  Alias into our tree
    private FmqDir dir;             //  Directory snapshot
    private List &lt;Sub&gt; subs;  //  Client subscriptions


    //  --------------------------------------------------------------------------
    //  Constructor
    //  Loads directory tree if possible

    private Mount (String location, String alias)
    {
        //  Mount path must start with '/'
        //  We'll do better error handling later
        assert (alias.startsWith ("/"));
        
        this.location = location;
        this.alias = alias;
        dir = FmqDir.newFmqDir (location, null);
        subs = new ArrayList &lt;Sub&gt; ();
    }


    //  --------------------------------------------------------------------------
    //  Destructor

    private void destroy ()
    {
        //  Destroy subscriptions
        for (Sub sub : subs) {
            sub.destroy ();
        }
        if (dir != null)
            dir.destroy ();
    }


    //  --------------------------------------------------------------------------
    //  Reloads directory tree and returns true if activity, false if the same

    private boolean refresh (Server server)
    {
        boolean activity = false;

        //  Get latest snapshot and build a patches list for any changes
        FmqDir latest = FmqDir.newFmqDir (location, null);
        List &lt;FmqPatch&gt; patches = FmqDir.diff (dir, latest, alias);

        //  Drop old directory and replace with latest version
        if (dir != null)
            dir.destroy ();
        dir = latest;

        //  Copy new patches to clients' patches list
        for (Sub sub : subs) {
            for (FmqPatch patch : patches) {
                sub.addPatch (patch);
                activity = true;
            }
        }
        
        //  Destroy patches, they've all been copied
        for (FmqPatch patch : patches) {
            patch.destroy ();
        }
        return activity;
    }


    //  --------------------------------------------------------------------------
    //  Store subscription for mount point

    private void storeSub (Client client, FmqMsg request)
    {
        //  Store subscription along with any previous ones
        //  Coalesce subscriptions that are on same path
        String path = request.path ();
        Iterator &lt;Sub&gt; it = subs.iterator ();
        while (it.hasNext ()) {
            Sub sub = it.next ();
            if (client == sub.client) {
                //  If old subscription is superset/same as new, ignore new
                if (path.startsWith (sub.path))
                    return;
                else
                //  If new subscription is superset of old one, remove old
                if (sub.path.startsWith (path)) {
                    it.remove ();
                    sub.destroy ();
                }
            }
        }
        //  New subscription for this client, append to our list
        Sub sub = new Sub (client, path, request.cache ());
        subs.add (sub);

        //  If client requested resync, send full mount contents now
        if (request.optionsNumber ("RESYNC", 0) == 1) {
            List &lt;FmqPatch&gt; patches = FmqDir.resync (dir, alias);
            for (FmqPatch patch : patches) {
                sub.addPatch (patch);
                patch.destroy ();
            }
        }
    }


    //  --------------------------------------------------------------------------
    //  Purge subscriptions for a specified client

    private void purgeSub (Client client)
    {
        Iterator &lt;Sub&gt; it = subs.iterator ();
        while (it.hasNext ()) {
            Sub sub = it.next ();
            if (sub.client == client) {
                it.remove ();
                sub.destroy ();
            }
        }
    }
}
</declare>
