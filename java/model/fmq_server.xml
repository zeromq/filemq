<class name = "fmq_server" codec = "fmq_msg">
FileMQ protocol server
<include filename = "license.xml" />
<include filename = "../../model/fmq_server_fsm.xml" />

<!-- Server and client contexts -->
<declare>
//  There's no point making these configurable
private static final int CHUNK_SIZE = 1000000;
</declare>

<self>
<context>
private List &lt;Mount&gt; mounts;  //  Mount points
private int port;                   //  Server port
</context>
<construct>
mounts = new ArrayList &lt;Mount&gt; ();
</construct>
<destruct>
//  Destroy mount points
for (Mount mount : mounts)
    mount.destroy ();
</destruct>
</self>

<client>
<context>
private int credit;                     //  Credit remaining
private List &lt;FmqPatch&gt; patches;  //  Patches to send
private FmqPatch patch;                 //  Current patch
private FmqFile file;                   //  Current file we're sending
private long offset;                    //  Offset of next read in file
private long sequence;                  //  Sequence number for chunk
</context>
<construct>
patches = new ArrayList &lt;FmqPatch&gt; ();
</construct>
<destruct>
for (FmqPatch patch : patches)
    patch.destroy ();
</destruct>
</client>

<!-- Embedded class for subscriptions -->
<include filename = "fmq_server_sub.xml" />
<!-- Embedded class for mount points -->
<include filename = "fmq_server_mount.xml" />

<!-- Action bodies -->
<action name = "terminate the client">
for (Mount mount : mounts) {
    mount.purgeSub (client);
}
client.next_event = Event.terminate_event;
</action>

<action name = "try anonymous access">
if (Integer.parseInt (config.resolve ("security/anonymous", "0")) == 1)
    client.next_event = Event.friend_event;
else
if (Integer.parseInt (config.resolve ("security/plain", "0")) == 1)
    client.next_event = Event.maybe_event;
else
    client.next_event = Event.foe_event;
</action>
    
<action name = "list security mechanisms">
if (Integer.parseInt (config.resolve ("security/anonymous", "0")) == 1)
    client.reply.appendMechanisms ("ANONYMOUS");
if (Integer.parseInt (config.resolve ("security/plain", "0")) == 1)
    client.reply.appendMechanisms ("PLAIN");
</action>

<action name = "try security mechanism">
client.next_event = Event.foe_event;
String [] result = new String [2];
String login, password;
if (client.request.mechanism ().equals ("PLAIN")
&& FmqSasl.plainDecode (client.request.response (), result)) {
    login = result [0];
    password = result [1];
    FmqConfig account = config.locate ("security/plain/account");
    while (account != null) {
        if (account.resolve ("login", "").equals (login)
        && account.resolve ("password", "").equals (password)) {
            client.next_event = Event.friend_event;
            break;
        }
        account = account.next ();
    }
}
</action>

<action name = "store client subscription">
//  Find mount point with longest match to subscription
String path = client.request.path ();

Mount mount = mounts.isEmpty () ? null : mounts.get (0);
for (Mount check : mounts) {
    //  If check->alias is prefix of path and alias is
    //  longer than current mount then we have a new mount
    if (path.startsWith (check.alias)
    &&  check.alias.length () > mount.alias.length ())
        mount = check;
}
mount.storeSub (client, client.request);
</action>

<action name = "store client credit">
client.credit += client.request.credit ();
</action>

<!-- Hook actions -->
<declare>
//  Client hash function that checks if client is alive
private static void clientDispatch (Map &lt;String, Client&gt; clients, Server server)
{
    for (Client client : clients.values ())
        server.clientExecute (client, Event.dispatch_event);
}
</declare>

<action name = "monitor the server">
boolean activity = false;
for (Mount mount : mounts) {
    if (mount.refresh (this))
        activity = true;
}
if (activity)
    clientDispatch (clients, this);
</action>

<action name = "get next patch for client">
//  Get next patch for client if we're not doing one already
if (client.patch == null)
    client.patch = client.patches.isEmpty () ? null : client.patches.remove (0);
if (client.patch == null) {
    client.next_event = Event.finished_event;
    return;
}
//  Get virtual filename from patch
client.reply.setFilename (client.patch.virtual ());

//  We can process a delete patch right away
if (client.patch.op () == FmqPatch.OP.patch_delete) {
    client.reply.setSequence (client.sequence++);
    client.reply.setOperation (FmqMsg.FMQ_MSG_FILE_DELETE);
    client.next_event = Event.send_delete_event;
    
    //  No reliability in this version, assume patch delivered safely
    client.patch.destroy ();
    client.patch = null;
}
else
if (client.patch.op () == FmqPatch.OP.patch_create) {
    //  Create patch refers to file, open that for input if needed
    if (client.file == null) {
        client.file = client.patch.file ().dup ();
        if (client.file.input () == false) {
            //  File no longer available, skip it
            client.patch.destroy ();
            client.file.destroy ();
            client.patch = null;
            client.file = null;
            client.next_event = Event.next_patch_event;
            return;
        }
        client.offset = 0;
    }
    //  Get next chunk for file
    FmqChunk chunk = client.file.read (CHUNK_SIZE, client.offset);
    assert (chunk != null);

    //  Check if we have the credit to send chunk
    if (chunk.size () <= client.credit) {
        client.reply.setSequence (client.sequence++);
        client.reply.setOperation (FmqMsg.FMQ_MSG_FILE_CREATE);
        client.reply.setOffset (client.offset);
        client.reply.setChunk (new ZFrame (chunk.data ()));
        
        client.offset += chunk.size ();
        client.credit -= chunk.size ();
        client.next_event = Event.send_chunk_event;
        
        //  Zero-sized chunk means end of file
        if (chunk.size () == 0) {
            client.file.destroy ();
            client.patch.destroy ();
            client.patch = null;
            client.file = null;
        }
    }
    else
        client.next_event = Event.no_credit_event;
        
    chunk.destroy ();
}
</action>

<!-- API methods -->

<method name = "bind" return = "number">
<argument name = "endpoint" type = "string" />
port = bind (router, endpoint);
<return>pipe.send (String.format ("%d", port));</return>
</method>

<method name = "publish">
<argument name = "location" type = "string" />
<argument name = "alias" type = "string" />
Mount mount = new Mount (location, alias);
mounts.add (mount);
</method>

<method name = "set anonymous">
<argument name = "enabled" type = "number" />
//  Enable anonymous access without a config file
config.setPath ("security/anonymous", enabled > 0 ? "1" :"0");
</method>

<include filename = "fmq_server_selftest.xml" />

</class>
