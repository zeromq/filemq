<declare>
//  --------------------------------------------------------------------------
//  Subscription object

private static class Sub {
    private Client client;                //  Always refers to live client
    private String path;                  //  Path client is subscribed to
    private Map &lt;String, String&gt; cache;   //  Client's cache list

    //  --------------------------------------------------------------------------
    //  Constructor

    private Sub (Client client, String path, Map &lt;String, String&gt; cache)
    {
        this.client = client;
        this.path = path;
        this.cache = new HashMap &lt;String, String&gt; (cache);
        resolveCachePath (this.cache, this);
    }

    //  Cached filenames may be local, in which case prefix them with
    //  the subscription path so we can do a consistent match.

    private static void resolveCachePath (Map &lt;String, String&gt; cache, Sub self)
    {
        for (String key : cache.keySet ()) {
          if (!key.startsWith ("/")) {
              String new_key = String.format ("%s/%s", self.path, key);
              cache.put (new_key, cache.remove (key));
          }
        }
    }


    //  --------------------------------------------------------------------------
    //  Destructor

    private void destroy ()
    {
    }


    //  --------------------------------------------------------------------------
    //  Add patch to sub client patches list

    private void addPatch (FmqPatch patch)
    {
        //  Skip file creation if client already has identical file
        patch.setDigest ();
        if (patch.op () == FmqPatch.OP.patch_create) {
            String digest = cache.get (patch.virtual ());
            if (digest != null && digest.compareToIgnoreCase (patch.digest ()) == 0)
                return;             //  Just skip patch for this client
        }
        //  Remove any previous patches for the same file
        Iterator &lt;FmqPatch&gt; it = client.patches.iterator ();
        while (it.hasNext ()) {
            FmqPatch existing = it.next ();
            if (patch.virtual ().equals (existing.virtual ())) {
                it.remove ();
                existing.destroy ();
                break;
            }
        }
        //  Track that we've queued patch for client, so we don't do it twice
        cache.put (patch.digest (), patch.virtual ());
        client.patches.add (patch.dup ());
    }
}
</declare>
