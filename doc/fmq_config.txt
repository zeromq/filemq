fmq_config(3)
=============

NAME
----
fmq_config - work with configuration files

SYNOPSIS
--------
----
//  Function that executes config
typedef int (fmq_config_fct) (fmq_config_t *self, void *arg, int level);

//  Create new config item
fmq_config_t *
    fmq_config_new (const char *name, fmq_config_t *parent);

//  Destroy a config item and all its children
void
    fmq_config_destroy (fmq_config_t **self_p);

//  Return name of config item
char *
    fmq_config_name (fmq_config_t *self);

//  Set config item name, name may be NULL
void
    fmq_config_name_set (fmq_config_t *self, const char *name);

//  Return value of config item
char *
    fmq_config_value (fmq_config_t *self);
    
//  Set value of config item
void
    fmq_config_value_set (fmq_config_t *self, const char *value);
    
//  Set value of config item via printf format
char *
    fmq_config_value_format (fmq_config_t *self, const char *format, ...);

//  Insert or update configuration key with value
void
    fmq_config_path_set (fmq_config_t *self, const char *path, const char *value);

//  Find the first child of a config item, if any
fmq_config_t *
    fmq_config_child (fmq_config_t *self);

//  Find the next sibling of a config item, if any
fmq_config_t *
    fmq_config_next (fmq_config_t *self);

//  Find a config item along a path
fmq_config_t *
    fmq_config_locate (fmq_config_t *self, const char *path);

//  Resolve a configuration path into a string value
char *
    fmq_config_resolve (fmq_config_t *self,
                        const char *path, const char *default_value);

//  Set config item name, name may be NULL
void
    fmq_config_path_set (fmq_config_t *self, const char *path, const char *value);

//  Locate the last config item at a specified depth
fmq_config_t *
    fmq_config_at_depth (fmq_config_t *self, int level);

//  Execute a callback for each config item in the tree
int
    fmq_config_execute (fmq_config_t *self, fmq_config_fct handler, void *arg);

//  Load a config item tree from a ZPL text file
fmq_config_t *
    fmq_config_load (const char *filename);

//  Dump the config file to stdout for tracing
void
    fmq_config_dump (fmq_config_t *self);

//  Self test of this class
int
    fmq_config_test (bool verbose);
----

DESCRIPTION
-----------

The fmq_config class represents configuration data.


EXAMPLE
-------
.From fmq_config_test method
----
    //  We create a config of this structure:
    //
    //  root
    //      type = zqueue
    //      frontend
    //          option
    //              swap = 25000000     #  25MB
    //              subscribe = #2
    //              hwm = 1000
    //          bind = tcp://*:5555
    //      backend
    //          bind = tcp://*:5556
    //
    fmq_config_t
        *root,
        *type,
        *frontend,
        *option,
        *hwm,
        *swap,
        *subscribe,
        *bind,
        *backend;

    //  Left is first child, next is next sibling
    root     = fmq_config_new ("root", NULL);
    type     = fmq_config_new ("type", root);
    fmq_config_value_set (type, "zqueue");
    frontend = fmq_config_new ("frontend", root);
    option   = fmq_config_new ("option", frontend);
    swap     = fmq_config_new ("swap", option);
    fmq_config_value_set (swap, "25000000");
    subscribe = fmq_config_new ("subscribe", option);
    fmq_config_value_format (subscribe, "#%d", 2);
    hwm      = fmq_config_new ("hwm", option);
    fmq_config_value_set (hwm, "1000");
    bind     = fmq_config_new ("bind", frontend);
    fmq_config_value_set (bind, "tcp://*:5555");
    backend  = fmq_config_new ("backend", root);
    bind     = fmq_config_new ("bind", backend);
    fmq_config_value_set (bind, "tcp://*:5556");

    assert (atoi (fmq_config_resolve (root, "frontend/option/hwm", "0")) == 1000);
    assert (streq (fmq_config_resolve (root, "backend/bind", ""), "tcp://*:5556"));

    fmq_config_path_set (root, "frontend/option/hwm", "500");
    assert (atoi (fmq_config_resolve (root, "frontend/option/hwm", "0")) == 500);
    fmq_config_path_set (root, "frontend/option/lwm", "200");
    assert (atoi (fmq_config_resolve (root, "frontend/option/lwm", "0")) == 200);
    
    fmq_config_destroy (&root);
    assert (root == NULL);

    //  Test loading from a ZPL file
    fmq_config_t *config = fmq_config_load ("anonymous.cfg");
    assert (config);

    //  Destructor should be safe to call twice
    fmq_config_destroy (&config);
    fmq_config_destroy (&config);
    assert (config == NULL);
----

SEE ALSO
--------
linkfmq:filemq[1]
