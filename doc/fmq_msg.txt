fmq_msg(3)
==========

NAME
----
fmq_msg - work with filemq messages

SYNOPSIS
--------
----
//  Create a new fmq_msg
fmq_msg_t *
    fmq_msg_new (int id);

//  Destroy the fmq_msg
void
    fmq_msg_destroy (fmq_msg_t **self_p);

//  Receive and parse a fmq_msg from the input
fmq_msg_t *
    fmq_msg_recv (void *input);

//  Send the fmq_msg to the output, and destroy it
int
    fmq_msg_send (fmq_msg_t **self_p, void *output);

//  Send the OHAI to the output in one step
int
    fmq_msg_send_ohai (void *output);
    
//  Send the ORLY to the output in one step
int
    fmq_msg_send_orly (void *output,
        zlist_t *mechanisms,
        zframe_t *challenge);
    
//  Send the YARLY to the output in one step
int
    fmq_msg_send_yarly (void *output,
        char *mechanism,
        zframe_t *response);
    
//  Send the OHAI_OK to the output in one step
int
    fmq_msg_send_ohai_ok (void *output);
    
//  Send the ICANHAZ to the output in one step
int
    fmq_msg_send_icanhaz (void *output,
        char *path,
        zhash_t *options,
        zhash_t *cache);
    
//  Send the ICANHAZ_OK to the output in one step
int
    fmq_msg_send_icanhaz_ok (void *output);
    
//  Send the NOM to the output in one step
int
    fmq_msg_send_nom (void *output,
        uint64_t credit,
        uint64_t sequence);
    
//  Send the CHEEZBURGER to the output in one step
int
    fmq_msg_send_cheezburger (void *output,
        uint64_t sequence,
        byte operation,
        char *filename,
        uint64_t offset,
        byte eof,
        zhash_t *headers,
        zframe_t *chunk);
    
//  Send the HUGZ to the output in one step
int
    fmq_msg_send_hugz (void *output);
    
//  Send the HUGZ_OK to the output in one step
int
    fmq_msg_send_hugz_ok (void *output);
    
//  Send the KTHXBAI to the output in one step
int
    fmq_msg_send_kthxbai (void *output);
    
//  Send the SRSLY to the output in one step
int
    fmq_msg_send_srsly (void *output,
        char *reason);
    
//  Send the RTFM to the output in one step
int
    fmq_msg_send_rtfm (void *output,
        char *reason);
    
//  Duplicate the fmq_msg message
fmq_msg_t *
    fmq_msg_dup (fmq_msg_t *self);

//  Print contents of message to stdout
void
    fmq_msg_dump (fmq_msg_t *self);

//  Get/set the message address
zframe_t *
    fmq_msg_address (fmq_msg_t *self);
void
    fmq_msg_set_address (fmq_msg_t *self, zframe_t *address);

//  Get the fmq_msg id and printable command
int
    fmq_msg_id (fmq_msg_t *self);
void
    fmq_msg_set_id (fmq_msg_t *self, int id);
char *
    fmq_msg_command (fmq_msg_t *self);

//  Get/set the mechanisms field
zlist_t *
    fmq_msg_mechanisms (fmq_msg_t *self);
void
    fmq_msg_set_mechanisms (fmq_msg_t *self, zlist_t *mechanisms);

//  Iterate through the mechanisms field, and append a mechanisms value
char *
    fmq_msg_mechanisms_first (fmq_msg_t *self);
char *
    fmq_msg_mechanisms_next (fmq_msg_t *self);
void
    fmq_msg_mechanisms_append (fmq_msg_t *self, char *format, ...);
size_t
    fmq_msg_mechanisms_size (fmq_msg_t *self);

//  Get/set the challenge field
zframe_t *
    fmq_msg_challenge (fmq_msg_t *self);
void
    fmq_msg_set_challenge (fmq_msg_t *self, zframe_t *frame);

//  Get/set the mechanism field
char *
    fmq_msg_mechanism (fmq_msg_t *self);
void
    fmq_msg_set_mechanism (fmq_msg_t *self, char *format, ...);

//  Get/set the response field
zframe_t *
    fmq_msg_response (fmq_msg_t *self);
void
    fmq_msg_set_response (fmq_msg_t *self, zframe_t *frame);

//  Get/set the path field
char *
    fmq_msg_path (fmq_msg_t *self);
void
    fmq_msg_set_path (fmq_msg_t *self, char *format, ...);

//  Get/set the options field
zhash_t *
    fmq_msg_options (fmq_msg_t *self);
void
    fmq_msg_set_options (fmq_msg_t *self, zhash_t *options);
    
//  Get/set a value in the options dictionary
char *
    fmq_msg_options_string (fmq_msg_t *self, char *key, char *default_value);
uint64_t
    fmq_msg_options_number (fmq_msg_t *self, char *key, uint64_t default_value);
void
    fmq_msg_options_insert (fmq_msg_t *self, char *key, char *format, ...);
size_t
    fmq_msg_options_size (fmq_msg_t *self);

//  Get/set the cache field
zhash_t *
    fmq_msg_cache (fmq_msg_t *self);
void
    fmq_msg_set_cache (fmq_msg_t *self, zhash_t *cache);
    
//  Get/set a value in the cache dictionary
char *
    fmq_msg_cache_string (fmq_msg_t *self, char *key, char *default_value);
uint64_t
    fmq_msg_cache_number (fmq_msg_t *self, char *key, uint64_t default_value);
void
    fmq_msg_cache_insert (fmq_msg_t *self, char *key, char *format, ...);
size_t
    fmq_msg_cache_size (fmq_msg_t *self);

//  Get/set the credit field
uint64_t
    fmq_msg_credit (fmq_msg_t *self);
void
    fmq_msg_set_credit (fmq_msg_t *self, uint64_t credit);

//  Get/set the sequence field
uint64_t
    fmq_msg_sequence (fmq_msg_t *self);
void
    fmq_msg_set_sequence (fmq_msg_t *self, uint64_t sequence);

//  Get/set the operation field
byte
    fmq_msg_operation (fmq_msg_t *self);
void
    fmq_msg_set_operation (fmq_msg_t *self, byte operation);

//  Get/set the filename field
char *
    fmq_msg_filename (fmq_msg_t *self);
void
    fmq_msg_set_filename (fmq_msg_t *self, char *format, ...);

//  Get/set the offset field
uint64_t
    fmq_msg_offset (fmq_msg_t *self);
void
    fmq_msg_set_offset (fmq_msg_t *self, uint64_t offset);

//  Get/set the eof field
byte
    fmq_msg_eof (fmq_msg_t *self);
void
    fmq_msg_set_eof (fmq_msg_t *self, byte eof);

//  Get/set the headers field
zhash_t *
    fmq_msg_headers (fmq_msg_t *self);
void
    fmq_msg_set_headers (fmq_msg_t *self, zhash_t *headers);
    
//  Get/set a value in the headers dictionary
char *
    fmq_msg_headers_string (fmq_msg_t *self, char *key, char *default_value);
uint64_t
    fmq_msg_headers_number (fmq_msg_t *self, char *key, uint64_t default_value);
void
    fmq_msg_headers_insert (fmq_msg_t *self, char *key, char *format, ...);
size_t
    fmq_msg_headers_size (fmq_msg_t *self);

//  Get/set the chunk field
zframe_t *
    fmq_msg_chunk (fmq_msg_t *self);
void
    fmq_msg_set_chunk (fmq_msg_t *self, zframe_t *frame);

//  Get/set the reason field
char *
    fmq_msg_reason (fmq_msg_t *self);
void
    fmq_msg_set_reason (fmq_msg_t *self, char *format, ...);

//  Self test of this class
int
    fmq_msg_test (bool verbose);
----

DESCRIPTION
-----------

the fmq_msg class represents filemq messages.


EXAMPLE
-------
.From fmq_msg_test method
----
    //  Simple create/destroy test
    fmq_msg_t *self = fmq_msg_new (0);
    assert (self);
    fmq_msg_destroy (&self);

    //  Create pair of sockets we can send through
    zctx_t *ctx = zctx_new ();
    assert (ctx);

    void *output = zsocket_new (ctx, ZMQ_DEALER);
    assert (output);
    zsocket_bind (output, "inproc://selftest");
    void *input = zsocket_new (ctx, ZMQ_ROUTER);
    assert (input);
    zsocket_connect (input, "inproc://selftest");
    
    //  Encode/send/decode and verify each message type

    self = fmq_msg_new (FMQ_MSG_OHAI);
    fmq_msg_send (&self, output);
    
    self = fmq_msg_recv (input);
    assert (self);
    fmq_msg_destroy (&self);

    self = fmq_msg_new (FMQ_MSG_ORLY);
    fmq_msg_mechanisms_append (self, "Name: %s", "Brutus");
    fmq_msg_mechanisms_append (self, "Age: %d", 43);
    fmq_msg_set_challenge (self, zframe_new ("Captcha Diem", 12));
    fmq_msg_send (&self, output);
    
    self = fmq_msg_recv (input);
    assert (self);
    assert (fmq_msg_mechanisms_size (self) == 2);
    assert (streq (fmq_msg_mechanisms_first (self), "Name: Brutus"));
    assert (streq (fmq_msg_mechanisms_next (self), "Age: 43"));
    assert (zframe_streq (fmq_msg_challenge (self), "Captcha Diem"));
    fmq_msg_destroy (&self);

    self = fmq_msg_new (FMQ_MSG_YARLY);
    fmq_msg_set_mechanism (self, "Life is short but Now lasts for ever");
    fmq_msg_set_response (self, zframe_new ("Captcha Diem", 12));
    fmq_msg_send (&self, output);
    
    self = fmq_msg_recv (input);
    assert (self);
    assert (streq (fmq_msg_mechanism (self), "Life is short but Now lasts for ever"));
    assert (zframe_streq (fmq_msg_response (self), "Captcha Diem"));
    fmq_msg_destroy (&self);

    self = fmq_msg_new (FMQ_MSG_OHAI_OK);
    fmq_msg_send (&self, output);
    
    self = fmq_msg_recv (input);
    assert (self);
    fmq_msg_destroy (&self);

    self = fmq_msg_new (FMQ_MSG_ICANHAZ);
    fmq_msg_set_path (self, "Life is short but Now lasts for ever");
    fmq_msg_options_insert (self, "Name", "Brutus");
    fmq_msg_options_insert (self, "Age", "%d", 43);
    fmq_msg_cache_insert (self, "Name", "Brutus");
    fmq_msg_cache_insert (self, "Age", "%d", 43);
    fmq_msg_send (&self, output);
    
    self = fmq_msg_recv (input);
    assert (self);
    assert (streq (fmq_msg_path (self), "Life is short but Now lasts for ever"));
    assert (fmq_msg_options_size (self) == 2);
    assert (streq (fmq_msg_options_string (self, "Name", "?"), "Brutus"));
    assert (fmq_msg_options_number (self, "Age", 0) == 43);
    assert (fmq_msg_cache_size (self) == 2);
    assert (streq (fmq_msg_cache_string (self, "Name", "?"), "Brutus"));
    assert (fmq_msg_cache_number (self, "Age", 0) == 43);
    fmq_msg_destroy (&self);

    self = fmq_msg_new (FMQ_MSG_ICANHAZ_OK);
    fmq_msg_send (&self, output);
    
    self = fmq_msg_recv (input);
    assert (self);
    fmq_msg_destroy (&self);

    self = fmq_msg_new (FMQ_MSG_NOM);
    fmq_msg_set_credit (self, 123);
    fmq_msg_set_sequence (self, 123);
    fmq_msg_send (&self, output);
    
    self = fmq_msg_recv (input);
    assert (self);
    assert (fmq_msg_credit (self) == 123);
    assert (fmq_msg_sequence (self) == 123);
    fmq_msg_destroy (&self);

    self = fmq_msg_new (FMQ_MSG_CHEEZBURGER);
    fmq_msg_set_sequence (self, 123);
    fmq_msg_set_operation (self, 123);
    fmq_msg_set_filename (self, "Life is short but Now lasts for ever");
    fmq_msg_set_offset (self, 123);
    fmq_msg_set_eof (self, 123);
    fmq_msg_headers_insert (self, "Name", "Brutus");
    fmq_msg_headers_insert (self, "Age", "%d", 43);
    fmq_msg_set_chunk (self, zframe_new ("Captcha Diem", 12));
    fmq_msg_send (&self, output);
    
    self = fmq_msg_recv (input);
    assert (self);
    assert (fmq_msg_sequence (self) == 123);
    assert (fmq_msg_operation (self) == 123);
    assert (streq (fmq_msg_filename (self), "Life is short but Now lasts for ever"));
    assert (fmq_msg_offset (self) == 123);
    assert (fmq_msg_eof (self) == 123);
    assert (fmq_msg_headers_size (self) == 2);
    assert (streq (fmq_msg_headers_string (self, "Name", "?"), "Brutus"));
    assert (fmq_msg_headers_number (self, "Age", 0) == 43);
    assert (zframe_streq (fmq_msg_chunk (self), "Captcha Diem"));
    fmq_msg_destroy (&self);

    self = fmq_msg_new (FMQ_MSG_HUGZ);
    fmq_msg_send (&self, output);
    
    self = fmq_msg_recv (input);
    assert (self);
    fmq_msg_destroy (&self);

    self = fmq_msg_new (FMQ_MSG_HUGZ_OK);
    fmq_msg_send (&self, output);
    
    self = fmq_msg_recv (input);
    assert (self);
    fmq_msg_destroy (&self);

    self = fmq_msg_new (FMQ_MSG_KTHXBAI);
    fmq_msg_send (&self, output);
    
    self = fmq_msg_recv (input);
    assert (self);
    fmq_msg_destroy (&self);

    self = fmq_msg_new (FMQ_MSG_SRSLY);
    fmq_msg_set_reason (self, "Life is short but Now lasts for ever");
    fmq_msg_send (&self, output);
    
    self = fmq_msg_recv (input);
    assert (self);
    assert (streq (fmq_msg_reason (self), "Life is short but Now lasts for ever"));
    fmq_msg_destroy (&self);

    self = fmq_msg_new (FMQ_MSG_RTFM);
    fmq_msg_set_reason (self, "Life is short but Now lasts for ever");
    fmq_msg_send (&self, output);
    
    self = fmq_msg_recv (input);
    assert (self);
    assert (streq (fmq_msg_reason (self), "Life is short but Now lasts for ever"));
    fmq_msg_destroy (&self);

    zctx_destroy (&ctx);
----

SEE ALSO
--------
linkfmq:filemq[1]
