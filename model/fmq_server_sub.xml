<declare>
//  --------------------------------------------------------------------------
//  Subscription object

typedef struct {
    client_t *client;           //  Always refers to live client
    char *path;                 //  Path client is subscribed to
    zhash_t *cache;             //  Client's cache list
} sub_t;

static int
s_resolve_cache_path (const char *key, void *item, void *argument);

//  --------------------------------------------------------------------------
//  Constructor

static sub_t *
sub_new (client_t *client, char *path, zhash_t *cache)
{
    sub_t *self = (sub_t *) zmalloc (sizeof (sub_t));
    self->client = client;
    self->path = strdup (path);
    self->cache = zhash_dup (cache);
    zhash_foreach (self->cache, s_resolve_cache_path, self);
    return self;
}

//  Cached filenames may be local, in which case prefix them with
//  the subscription path so we can do a consistent match.

static int
s_resolve_cache_path (const char *key, void *item, void *argument)
{
    sub_t *self = (sub_t *) argument;
    if (*key != '/') {
        char *new_key = malloc (strlen (self->path) + strlen (key) + 2);
        sprintf (new_key, "%s/%s", self->path, key);
        zhash_rename (self->cache, key, new_key);
        free (new_key);
    }
    return 0;
}


//  --------------------------------------------------------------------------
//  Destructor

static void
sub_destroy (sub_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        sub_t *self = *self_p;
        zhash_destroy (&self->cache);
        free (self->path);
        free (self);
        *self_p = NULL;
    }
}


//  --------------------------------------------------------------------------
//  Add patch to sub client patches list

static void
sub_patch_add (sub_t *self, fmq_patch_t *patch)
{
    //  Skip file creation if client already has identical file
    fmq_patch_digest_set (patch);
    if (fmq_patch_op (patch) == patch_create) {
        char *digest = zhash_lookup (self->cache, fmq_patch_virtual (patch));
        if (digest && strcasecmp (digest, fmq_patch_digest (patch)) == 0)
            return;             //  Just skip patch for this client
    }
    //  Remove any previous patches for the same file
    fmq_patch_t *existing = (fmq_patch_t *) zlist_first (self->client->patches);
    while (existing) {
        if (streq (fmq_patch_virtual (patch), fmq_patch_virtual (existing))) {
            zlist_remove (self->client->patches, existing);
            fmq_patch_destroy (&existing);
            break;
        }
        existing = (fmq_patch_t *) zlist_next (self->client->patches);
    }
    //  Track that we've queued patch for client, so we don't do it twice
    zhash_insert (self->cache, fmq_patch_digest (patch), fmq_patch_virtual (patch));
    zlist_append (self->client->patches, fmq_patch_dup (patch));
}
</declare>
<java_declare>
//  --------------------------------------------------------------------------
//  Subscription object

private static class Sub {
    private Client client;                //  Always refers to live client
    private String path;                  //  Path client is subscribed to
    private Map &lt;String, String&gt; cache;   //  Client's cache list

    //  --------------------------------------------------------------------------
    //  Constructor

    private Sub (Client client, String path, Map &lt;String, String&gt; cache)
    {
        this.client = client;
        this.path = path;
        this.cache = new HashMap &lt;String, String&gt; (cache);
        resolveCachePath (this.cache, this);
    }

    //  Cached filenames may be local, in which case prefix them with
    //  the subscription path so we can do a consistent match.

    private static void resolveCachePath (Map &lt;String, String&gt; cache, Sub self)
    {
        for (String key : cache.keySet ()) {
          if (!key.startsWith ("/")) {
              String new_key = String.format ("%s/%s", self.path, key);
              cache.put (new_key, cache.remove (key));
          }
        }
    }


    //  --------------------------------------------------------------------------
    //  Destructor

    private void destroy ()
    {
    }


    //  --------------------------------------------------------------------------
    //  Add patch to sub client patches list

    private void addPatch (FmqPatch patch)
    {
        //  Skip file creation if client already has identical file
        patch.setDigest ();
        if (patch.op () == FmqPatch.OP.patch_create) {
            String digest = cache.get (patch.virtual ());
            if (digest != null &amp;&amp; digest.compareToIgnoreCase (patch.digest ()) == 0)
                return;             //  Just skip patch for this client
        }
        //  Remove any previous patches for the same file
        Iterator &lt;FmqPatch&gt; it = client.patches.iterator ();
        while (it.hasNext ()) {
            FmqPatch existing = it.next ();
            if (patch.virtual ().equals (existing.virtual ())) {
                it.remove ();
                existing.destroy ();
                break;
            }
        }
        //  Track that we've queued patch for client, so we don't do it twice
        cache.put (patch.digest (), patch.virtual ());
        client.patches.add (patch.dup ());
    }
}

</java_declare>
