<class name = "fmq_client" script = "client_c" codec = "fmq_msg">
This is the FILEMQ/1.0 client protocol handler
<include filename = "license.xml" />

<state name = "start">
    <event name = "ready" next = "requesting access">
        <action name = "send" message ="OHAI" />
    </event>
</state>

<state name = "requesting access">
    <event name = "ORLY" next = "requesting access">
        <action name = "try security mechanism" />
        <action name = "send" message = "YARLY" />
    </event>
    <event name = "OHAI-OK" next = "subscribing">
        <action name = "connected to server" />
        <action name = "get first subscription" />
    </event>
    <!-- Server may be sending messages from old connection; ignore -->
    <event name = "$other" />
</state>

<state name = "subscribing">
    <event name = "ok" next = "subscribing">
        <action name = "format icanhaz command" />
        <action name = "send" message = "ICANHAZ" />
        <action name = "get next subscription" />
    </event>
    <event name = "finished" next = "ready">
        <action name = "refill credit as needed" />
    </event>
</state>

<state name = "ready">
    <event name = "CHEEZBURGER">
        <action name = "process the patch" />
        <action name = "refill credit as needed" />
    </event>
    <event name = "HUGZ">
        <action name = "send" message = "HUGZ-OK" />
    </event>
    <event name = "subscribe">
        <action name = "format icanhaz command" />
        <action name = "send" message = "ICANHAZ" />
    </event>
    <event name = "send credit">
        <action name = "send" message = "NOM" />
    </event>
    <event name = "ICANHAZ-OK" />
</state>

<state name = "defaults">
    <event name = "SRSLY" next = "start">
        <action name = "log access denied" />
        <action name = "terminate the client" />
    </event>
    <event name = "RTFM">
        <action name = "log invalid message" />
        <action name = "terminate the client" />
    </event>
    <event name = "$other">
        <action name = "log protocol error" />
        <action name = "terminate the client" />
    </event>
</state>

<!-- Server and client contexts -->
<declare>
//  There's no point making these configurable
#define CREDIT_SLICE    1000000
#define CREDIT_MINIMUM  (CREDIT_SLICE * 4) + 1
</declare>

<self>
<context>
bool connected;             //  Are we connected to server?
zlist_t *subs;              //  Subscriptions
sub_t *sub;                 //  Subscription we want to send
size_t credit;              //  Current credit pending
fmq_file_t *file;           //  File we're writing to
</context>

<construct>
self->subs = zlist_new ();
self->connected = false;
</construct>

<destruct>
//  Destroy subscriptions
while (zlist_size (self->subs)) {
    sub_t *sub = (sub_t *) zlist_pop (self->subs);
    sub_destroy (&sub);
}
zlist_destroy (&self->subs);
</destruct>
</self>

<!-- Embedded class for subscriptions -->
<include filename = "fmq_client_sub.xml" />

<action name = "initialize the client">
self->next_event = ready_event;
</action>

<action name = "try security mechanism">
char *login = fmq_config_resolve (self->config, "security/plain/login", "guest");
char *password = fmq_config_resolve (self->config, "security/plain/password", "");
zframe_t *frame = fmq_sasl_plain_encode (login, password);
fmq_msg_mechanism_set (self->request, "PLAIN");
fmq_msg_response_set  (self->request, frame);
</action>

<action name = "connected to server">
self->connected = true;
</action>

<action name = "get first subscription">
self->sub = (sub_t *) zlist_first (self->subs);
if (self->sub)
    self->next_event = ok_event;
else
    self->next_event = finished_event;
</action>

<action name = "get next subscription">
self->sub = (sub_t *) zlist_next (self->subs);
if (self->sub)
    self->next_event = ok_event;
else
    self->next_event = finished_event;
</action>

<action name = "format icanhaz command">
fmq_msg_path_set (self->request, self->sub->path);
//  If client app wants full resync, send cache to server
if (atoi (fmq_config_resolve (self->config, "client/resync", "0")) == 1) {
    fmq_msg_options_insert (self->request, "RESYNC", "1");
    fmq_msg_cache_set (self->request, sub_cache (self->sub));
}
</action>

<action name = "refill credit as needed">
//  If credit has fallen too low, send more credit
size_t credit_to_send = 0;
while (self->credit < CREDIT_MINIMUM) {
    credit_to_send += CREDIT_SLICE;
    self->credit += CREDIT_SLICE;
}
if (credit_to_send) {
    fmq_msg_credit_set (self->request, credit_to_send);
    self->next_event = send_credit_event;
}
</action>

<action name = "process the patch">
char *inbox = fmq_config_resolve (self->config, "client/inbox", ".inbox");
char *filename = fmq_msg_filename (self->reply);

//  Filenames from server must start with slash, which we skip
assert (*filename == '/');
filename++;                 

if (fmq_msg_operation (self->reply) == FMQ_MSG_FILE_CREATE) {
    if (self->file == NULL) {
        self->file = fmq_file_new (inbox, filename);
        if (fmq_file_output (self->file)) {
            //  File not writeable, skip patch
            fmq_file_destroy (&self->file);
            return;
        }
    }
    //  Try to write, ignore errors in this version
    zframe_t *frame = fmq_msg_chunk (self->reply);
    fmq_chunk_t *chunk = fmq_chunk_new (zframe_data (frame), zframe_size (frame));
    if (fmq_chunk_size (chunk) > 0) {
        fmq_file_write (self->file, chunk, fmq_msg_offset (self->reply));
        self->credit -= fmq_chunk_size (chunk);
    }
    else {
        //  Zero-sized chunk means end of file, so report back to caller
        zstr_sendm (self->pipe, "DELIVER");
        zstr_sendm (self->pipe, filename);
        zstr_sendf (self->pipe, "%s/%s", inbox, filename);
        fmq_file_destroy (&self->file);
    }
    fmq_chunk_destroy (&chunk);
}
else
if (fmq_msg_operation (self->reply) == FMQ_MSG_FILE_DELETE) {
    zclock_log ("I: delete %s/%s", inbox, filename);
    fmq_file_t *file = fmq_file_new (inbox, filename);
    fmq_file_remove (file);
    fmq_file_destroy (&file);
}
</action>

<action name = "log access denied">
puts ("W: server denied us access, retrying...");
</action>

<action name = "log invalid message">
puts ("E: server claims we sent an invalid message");
</action>

<action name = "log protocol error">
puts ("E: protocol error");
</action>

<action name = "terminate the client">
self->connected = false;
self->next_event = terminate_event;
</action>

<method name = "subscribe">
<argument name = "path" type = "string" />
//  Store subscription along with any previous ones
//  Check we don't already have a subscription for this path
self->sub = (sub_t *) zlist_first (self->subs);
while (self->sub) {
    if (streq (path, self->sub->path))
        return;
    self->sub = (sub_t *) zlist_next (self->subs);
}
//  Subscription path must start with '/'
//  We'll do better error handling later
assert (*path == '/');

//  New subscription, store it for later replay
char *inbox = fmq_config_resolve (self->config, "client/inbox", ".inbox");
self->sub = sub_new (self, inbox, path);
zlist_append (self->subs, self->sub);

//  If we're connected, then also send to server
if (self->connected)
    self->next_event = subscribe_event;
</method>

<method name = "set inbox">
<argument name = "path" type = "string" />
fmq_config_path_set (self->config, "client/inbox", path);
</method>

<method name = "set resync">
<argument name = "enabled" type = "number" />
//  Request resynchronization from server
fmq_config_path_set (self->config, "client/resync", enabled? "1" :"0");
</method>

<selftest config = "client_test.cfg">
<init>
fmq_client_connect (self, "tcp://localhost:6001");
sleep (1);
</init>
</selftest>

</class>
