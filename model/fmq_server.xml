<class name = "fmq_server" script = "server_c" codec = "fmq_msg">
FileMQ protocol server
<include filename = "license.xml" />

<state name = "start">
    <event name = "OHAI" next = "checking client">
        <action name = "try anonymous access" />
    </event>
</state>

<state name = "checking client">
    <event name = "friend" next = "ready">
        <action name = "send" message ="OHAI-OK" />
    </event>
    <event name = "foe">
        <action name = "send" message = "SRSLY" />
        <action name = "terminate the client" />
    </event>
    <event name = "maybe" next = "challenging client">
        <action name = "list security mechanisms" />
        <action name = "send" message = "ORLY" />
    </event>
</state>

<state name = "challenging client">
    <event name = "YARLY" next = "checking client">
        <action name = "try security mechanism" />
    </event>
</state>

<state name = "ready">
    <event name = "ICANHAZ">
        <action name = "store client subscription" />
        <action name = "send" message = "ICANHAZ-OK" />
    </event>
    <event name = "NOM" next = "dispatching">
        <action name = "store client credit" />
        <action name = "get next patch for client" />
    </event>
    <event name = "HUGZ">
        <action name = "send" message = "HUGZ-OK" />
    </event>
    <event name = "KTHXBAI">
        <action name = "terminate the client" />
    </event>
    <event name = "dispatch" next = "dispatching">
        <action name = "get next patch for client" />
    </event>
    <event name = "heartbeat">
        <action name = "send" message = "HUGZ" />
    </event>
</state>

<state name = "dispatching">
    <event name = "send chunk">
        <action name = "send" message = "CHEEZBURGER" />
        <action name = "get next patch for client" />
    </event>
    <event name = "send delete">
        <action name = "send" message = "CHEEZBURGER" />
        <action name = "get next patch for client" />
    </event>
    <event name = "next patch">
        <action name = "get next patch for client" />
    </event>
    <event name = "no credit" next = "ready" />
    <event name = "finished" next = "ready" />
</state>

<state name = "defaults">
    <event name = "heartbeat" />
    <event name = "expired">
        <action name = "terminate the client" />
    </event>
    <!-- Client can restart connection at any time -->
    <event name = "OHAI" next = "checking client">
        <action name = "try anonymous access" />
    </event>
    <event name = "$other">
        <action name = "send" message = "RTFM" />
        <action name = "terminate the client" />
    </event>
</state>

<!-- Server and client contexts -->
<declare>
//  There's no point making these configurable
#define CHUNK_SIZE      1000000
</declare>
<java_declare>
//  There's no point making these configurable
private static final int CHUNK_SIZE = 1000000;
</java_declare>

<self>
<context>
zlist_t *mounts;            //  Mount points
int port;                   //  Server port
</context>
<java_context>
private List &lt;Mount&gt; mounts;  //  Mount points
private int port;                   //  Server port
</java_context>

<construct>
self->mounts = zlist_new ();
</construct>
<java_construct>
mounts = new ArrayList &lt;Mount&gt; ();
</java_construct>

<destruct>
//  Destroy mount points
while (zlist_size (self->mounts)) {
    mount_t *mount = (mount_t *) zlist_pop (self->mounts);
    mount_destroy (&mount);
}
zlist_destroy (&self->mounts);
</destruct>
<java_destruct>
//  Destroy mount points
for (Mount mount : mounts)
    mount.destroy ();
</java_destruct>
</self>


<client>
<context>
size_t credit;              //  Credit remaining
zlist_t *patches;           //  Patches to send
fmq_patch_t *patch;         //  Current patch
fmq_file_t *file;           //  Current file we're sending
off_t offset;               //  Offset of next read in file
int64_t sequence;           //  Sequence number for chunk
</context>
<java_context>
private int credit;                     //  Credit remaining
private List &lt;FmqPatch&gt; patches;  //  Patches to send
private FmqPatch patch;                 //  Current patch
private FmqFile file;                   //  Current file we're sending
private long offset;                    //  Offset of next read in file
private long sequence;                  //  Sequence number for chunk
</java_context>

<construct>
self->patches = zlist_new ();
</construct>
<java_construct>
patches = new ArrayList &lt;FmqPatch&gt; ();
</java_construct>

<destruct>
while (zlist_size (self->patches)) {
    fmq_patch_t *patch = (fmq_patch_t *) zlist_pop (self->patches);
    fmq_patch_destroy (&patch);
}
zlist_destroy (&self->patches);
</destruct>
<java_destruct>
for (FmqPatch patch : patches)
    patch.destroy ();
</java_destruct>
</client>

<!-- Embedded class for subscriptions -->
<include filename = "fmq_server_sub.xml" />
<!-- Embedded class for mount points -->
<include filename = "fmq_server_mount.xml" />

<!-- Action bodies -->
<action name = "terminate the client">
mount_t *mount = (mount_t *) zlist_first (self->mounts);
while (mount) {
    mount_sub_purge (mount, client);
    mount = (mount_t *) zlist_next (self->mounts);
}
client->next_event = terminate_event;
</action>
<java_action name = "terminate the client">
for (Mount mount : mounts) {
    mount.purgeSub (client);
}
client.next_event = Event.terminate_event;
</java_action>

<action name = "try anonymous access">
if (atoi (fmq_config_resolve (self->config, "security/anonymous", "0")) == 1)
    client->next_event = friend_event;
else
if (atoi (fmq_config_resolve (self->config, "security/plain", "0")) == 1)
    client->next_event = maybe_event;
else
    client->next_event = foe_event;
</action>
<java_action name = "try anonymous access">
if (Integer.parseInt (config.resolve ("security/anonymous", "0")) == 1)
    client.next_event = Event.friend_event;
else
if (Integer.parseInt (config.resolve ("security/plain", "0")) == 1)
    client.next_event = Event.maybe_event;
else
    client.next_event = Event.foe_event;
</java_action>
    
<action name = "list security mechanisms">
if (atoi (fmq_config_resolve (self->config, "security/anonymous", "0")) == 1)
    fmq_msg_mechanisms_append (client->reply, "ANONYMOUS");
if (atoi (fmq_config_resolve (self->config, "security/plain", "0")) == 1)
    fmq_msg_mechanisms_append (client->reply, "PLAIN");
</action>
<java_action name = "list security mechanisms">
if (Integer.parseInt (config.resolve ("security/anonymous", "0")) == 1)
    client.reply.appendMechanisms ("ANONYMOUS");
if (Integer.parseInt (config.resolve ("security/plain", "0")) == 1)
    client.reply.appendMechanisms ("PLAIN");
</java_action>

<action name = "try security mechanism">
client->next_event = foe_event;
char *login, *password;
if (streq (fmq_msg_mechanism (client->request), "PLAIN")
&&  fmq_sasl_plain_decode (fmq_msg_response (client->request), &login, &password) == 0) {
    fmq_config_t *account = fmq_config_locate (self->config, "security/plain/account");
    while (account) {
        if (streq (fmq_config_resolve (account, "login", ""), login)
        &&  streq (fmq_config_resolve (account, "password", ""), password)) {
            client->next_event = friend_event;
            break;
        }
        account = fmq_config_next (account);
    }
}
free (login);
free (password);
</action>
<java_action name = "try security mechanism">
client.next_event = Event.foe_event;
String [] result = new String [2];
String login, password;
if (client.request.mechanism ().equals ("PLAIN")
&amp;&amp; FmqSasl.plainDecode (client.request.response (), result)) {
    login = result [0];
    password = result [1];
    FmqConfig account = config.locate ("security/plain/account");
    while (account != null) {
        if (account.resolve ("login", "").equals (login)
        &amp;&amp; account.resolve ("password", "").equals (password)) {
            client.next_event = Event.friend_event;
            break;
        }
        account = account.next ();
    }
}
</java_action>

<action name = "store client subscription">
//  Find mount point with longest match to subscription
char *path = fmq_msg_path (client->request);

mount_t *check = (mount_t *) zlist_first (self->mounts);
mount_t *mount = check;
while (check) {
    //  If check->alias is prefix of path and alias is
    //  longer than current mount then we have a new mount
    if (strncmp (path, check->alias, strlen (check->alias)) == 0
    &&  strlen (check->alias) > strlen (mount->alias))
        mount = check;
    check = (mount_t *) zlist_next (self->mounts);
}
mount_sub_store (mount, client, client->request);
</action>
<java_action name = "store client subscription">
//  Find mount point with longest match to subscription
String path = client.request.path ();

Mount mount = mounts.isEmpty () ? null : mounts.get (0);
for (Mount check : mounts) {
    //  If check->alias is prefix of path and alias is
    //  longer than current mount then we have a new mount
    if (path.startsWith (check.alias)
    &amp;&amp;  check.alias.length () > mount.alias.length ())
        mount = check;
}
mount.storeSub (client, client.request);
</java_action>

<action name = "store client credit">
client->credit += fmq_msg_credit (client->request);
</action>
<java_action name = "store client credit">
client.credit += client.request.credit ();
</java_action>

<!-- Hook actions -->
<declare>
//  Client hash function that checks if client is alive
static int
client_dispatch (const char *key, void *client, void *server)
{
    server_client_execute ((server_t *) server, (client_t *) client, dispatch_event);
    return 0;
}
</declare>
<java_declare>
//  Client hash function that checks if client is alive
private static void clientDispatch (Map &lt;String, Client&gt; clients, Server server)
{
    for (Client client : clients.values ())
        server.clientExecute (client, Event.dispatch_event);
}
</java_declare>

<action name = "monitor the server">
bool activity = false;
mount_t *mount = (mount_t *) zlist_first (self->mounts);
while (mount) {
    if (mount_refresh (mount, self))
        activity = true;
    mount = (mount_t *) zlist_next (self->mounts);
}
if (activity)
    zhash_foreach (self->clients, client_dispatch, self);
</action>
<java_action name = "monitor the server">
boolean activity = false;
for (Mount mount : mounts) {
    if (mount.refresh (this))
        activity = true;
}
if (activity)
    clientDispatch (clients, this);
</java_action>

<action name = "get next patch for client">
//  Get next patch for client if we're not doing one already
if (client->patch == NULL)
    client->patch = (fmq_patch_t *) zlist_pop (client->patches);
if (client->patch == NULL) {
    client->next_event = finished_event;
    return;
}
//  Get virtual filename from patch
fmq_msg_filename_set (client->reply, fmq_patch_virtual (client->patch));

//  We can process a delete patch right away
if (fmq_patch_op (client->patch) == patch_delete) {
    fmq_msg_sequence_set (client->reply, client->sequence++);
    fmq_msg_operation_set (client->reply, FMQ_MSG_FILE_DELETE);
    client->next_event = send_delete_event;
    
    //  No reliability in this version, assume patch delivered safely
    fmq_patch_destroy (&client->patch);
}
else
if (fmq_patch_op (client->patch) == patch_create) {
    //  Create patch refers to file, open that for input if needed
    if (client->file == NULL) {
        client->file = fmq_file_dup (fmq_patch_file (client->patch));
        if (fmq_file_input (client->file)) {
            //  File no longer available, skip it
            fmq_patch_destroy (&client->patch);
            fmq_file_destroy (&client->file);
            client->next_event = next_patch_event;
            return;
        }
        client->offset = 0;
    }
    //  Get next chunk for file
    fmq_chunk_t *chunk = fmq_file_read (client->file, CHUNK_SIZE, client->offset);
    assert (chunk);

    //  Check if we have the credit to send chunk
    if (fmq_chunk_size (chunk) <= client->credit) {
        fmq_msg_sequence_set (client->reply, client->sequence++);
        fmq_msg_operation_set (client->reply, FMQ_MSG_FILE_CREATE);
        fmq_msg_offset_set (client->reply, client->offset);
        fmq_msg_chunk_set (client->reply, zframe_new (
            fmq_chunk_data (chunk),
            fmq_chunk_size (chunk)));
        
        client->offset += fmq_chunk_size (chunk);
        client->credit -= fmq_chunk_size (chunk);
        client->next_event = send_chunk_event;
        
        //  Zero-sized chunk means end of file
        if (fmq_chunk_size (chunk) == 0) {
            fmq_file_destroy (&client->file);
            fmq_patch_destroy (&client->patch);
        }
    }
    else
        client->next_event = no_credit_event;
        
    fmq_chunk_destroy (&chunk);
}
</action>
<java_action name = "get next patch for client">
//  Get next patch for client if we're not doing one already
if (client.patch == null)
    client.patch = client.patches.isEmpty () ? null : client.patches.remove (0);
if (client.patch == null) {
    client.next_event = Event.finished_event;
    return;
}
//  Get virtual filename from patch
client.reply.setFilename (client.patch.virtual ());

//  We can process a delete patch right away
if (client.patch.op () == FmqPatch.OP.patch_delete) {
    client.reply.setSequence (client.sequence++);
    client.reply.setOperation (FmqMsg.FMQ_MSG_FILE_DELETE);
    client.next_event = Event.send_delete_event;
    
    //  No reliability in this version, assume patch delivered safely
    client.patch.destroy ();
    client.patch = null;
}
else
if (client.patch.op () == FmqPatch.OP.patch_create) {
    //  Create patch refers to file, open that for input if needed
    if (client.file == null) {
        client.file = client.patch.file ().dup ();
        if (client.file.input () == false) {
            //  File no longer available, skip it
            client.patch.destroy ();
            client.file.destroy ();
            client.patch = null;
            client.file = null;
            client.next_event = Event.next_patch_event;
            return;
        }
        client.offset = 0;
    }
    //  Get next chunk for file
    FmqChunk chunk = client.file.read (CHUNK_SIZE, client.offset);
    assert (chunk != null);

    //  Check if we have the credit to send chunk
    if (chunk.size () &lt;= client.credit) {
        client.reply.setSequence (client.sequence++);
        client.reply.setOperation (FmqMsg.FMQ_MSG_FILE_CREATE);
        client.reply.setOffset (client.offset);
        client.reply.setChunk (new ZFrame (chunk.data ()));
        
        client.offset += chunk.size ();
        client.credit -= chunk.size ();
        client.next_event = Event.send_chunk_event;
        
        //  Zero-sized chunk means end of file
        if (chunk.size () == 0) {
            client.file.destroy ();
            client.patch.destroy ();
            client.patch = null;
            client.file = null;
        }
    }
    else
        client.next_event = Event.no_credit_event;
        
    chunk.destroy ();
}
</java_action>

<!-- API methods -->

<method name = "bind" return = "number">
<argument name = "endpoint" type = "string" />
self->port = zsocket_bind (self->router, endpoint);
<return>zstr_sendf (self->pipe, "%d", self->port);</return>
</method>

<java_method name = "bind" return = "number">
<argument name = "endpoint" type = "string" />
port = bind (router, endpoint);
<return>pipe.send (String.format ("%d", port));</return>
</java_method>

<method name = "publish">
<argument name = "location" type = "string" />
<argument name = "alias" type = "string" />
mount_t *mount = mount_new (location, alias);
zlist_append (self->mounts, mount);
</method>

<java_method name = "publish">
<argument name = "location" type = "string" />
<argument name = "alias" type = "string" />
Mount mount = new Mount (location, alias);
mounts.add (mount);
</java_method>

<method name = "set anonymous">
<argument name = "enabled" type = "number" />
//  Enable anonymous access without a config file
fmq_config_path_set (self->config, "security/anonymous", enabled? "1" :"0");
</method>

<java_method name = "set anonymous">
<argument name = "enabled" type = "number" />
//  Enable anonymous access without a config file
config.setPath ("security/anonymous", enabled > 0 ? "1" :"0");
</java_method>

<include filename = "fmq_server_selftest.xml" />

</class>
