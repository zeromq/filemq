<declare>
//  Subscription in memory
typedef struct {
    client_t *client;           //  Pointer to parent client
    char *inbox;                //  Inbox location
    char *path;                 //  Path we subscribe to
} sub_t;

static sub_t *
sub_new (client_t *client, char *inbox, char *path)
{
    sub_t *self = (sub_t *) zmalloc (sizeof (sub_t));
    self->client = client;
    self->inbox = strdup (inbox);
    self->path = strdup (path);
    return self;
}

static void
sub_destroy (sub_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        sub_t *self = *self_p;
        free (self->inbox);
        free (self->path);
        free (self);
        *self_p = NULL;
    }
}

//  Return new cache object for subscription path

static zhash_t *
sub_cache (sub_t *self)
{
    //  Get directory cache for this path
    fmq_dir_t *dir = fmq_dir_new (self->path + 1, self->inbox);
    zhash_t *cache = dir? fmq_dir_cache (dir): NULL;
    fmq_dir_destroy (&dir);
    return cache;
}
</declare>

<java_declare>
//  Subscription in memory
private static class Sub {
    private Client client;           //  Pointer to parent client
    private String inbox;            //  Inbox location
    private String path;             //  Path we subscribe to

    private Sub (Client client, String inbox, String path)
    {
        this.client = client;
        this.inbox = inbox;
        this.path = path;
    }

    private void destroy ()
    {
    }

    //  Return new cache object for subscription path

    private Map &lt;String, String&gt; cache ()
    {
        //  Get directory cache for this path
        FmqDir dir = FmqDir.newFmqDir (path.substring(1), inbox);
        if (dir != null) {
            Map &lt;String, String&gt; cache = dir.cache ();
            dir.destroy ();
            return cache;
        }
        return null;
    }
}
</java_declare>
