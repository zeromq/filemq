.#  client_c.gsl
.#
.#  Generates a client engine for a specified protocol.
.#
.include "library.gsl"
.resolve_includes ()
.echo "Generating ../include/$(class.name).h..."
.output "../include/$(class.name).h"
/*  =========================================================================
    $(class.name).h

    Generated header for $(class.name) protocol client
    -------------------------------------------------------------------------
    $(string.trim (class->license.):block                                   )
    =========================================================================
*/

#ifndef __$(CLASS.NAME)_H_INCLUDED__
#define __$(CLASS.NAME)_H_INCLUDED__

#ifdef __cplusplus
extern "C" {
#endif

//  Opaque class structure
typedef struct _$(class.name)_t $(class.name)_t;

//  Create a new $(class.name)
$(class.name)_t *
    $(class.name)_new (void);

//  Destroy the $(class.name)
void
    $(class.name)_destroy ($(class.name)_t **self_p);

//  Load client configuration data
void
    $(class.name)_configure ($(class.name)_t *self, const char *config_file);

//  Set one configuration key value
void
    $(class.name)_setoption ($(class.name)_t *self, const char *path, const char *value);

//  Open connection to server
void
    $(class.name)_connect ($(class.name)_t *self, const char *endpoint);

//  Wait for message from API
zmsg_t *
    $(class.name)_recv ($(class.name)_t *self);

//  Return API pipe handle for polling
void *
    $(class.name)_handle ($(class.name)_t *self);

.for class.method
//  $(method.text?'':)
.   if return ?= "number"
.       method.ctype = "int"
.   elsif return ?= "string"
.       method.ctype = "char *"
.   else
.       method.ctype = "void"
.   endif
$(ctype)
    $(class.name)_$(name:c) ($(class.name)_t *self\
.   for argument
.       if type = "string"
, const char *$(name)\
.       elsif type = "number"
, long $(name)\
.       else
.           echo "E: we didn't add support for $(type)s in methods"
.       endif
.   endfor
);

.endfor
//  Self test of this class
int
    $(class.name)_test (bool verbose);

#ifdef __cplusplus
}
#endif

#endif
.echo "Generating ../src/$(class.name).c..."
.output "../src/$(class.name).c"
/*  =========================================================================
    $(class.name).c

    Generated class for $(class.name) protocol client
    -------------------------------------------------------------------------
    $(string.trim (class->license.):block                                   )
    =========================================================================
*/

#include <czmq.h>
#include "../include/$(class.name).h"
#include "../include/$(class.codec).h"
#include "../include/fmq.h"

//  The client runs as a background thread so that we can run multiple
//  engines at once. The API talks to the client thread over an inproc
//  pipe.

static void
    client_thread (void *args, zctx_t *ctx, void *pipe);

//  ---------------------------------------------------------------------
//  Structure of our front-end API class

struct _$(class.name)_t {
    zctx_t *ctx;        //  CZMQ context
    void *pipe;         //  Pipe through to client
};


//  --------------------------------------------------------------------------
//  Create a new $(class.name) and a new client instance

$(class.name)_t *
$(class.name)_new (void)
{
    $(class.name)_t *self = ($(class.name)_t *) zmalloc (sizeof ($(class.name)_t));
    self->ctx = zctx_new ();
    self->pipe = zthread_fork (self->ctx, client_thread, NULL);
    return self;
}


//  --------------------------------------------------------------------------
//  Destroy the $(class.name) and stop the client

void
$(class.name)_destroy ($(class.name)_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        $(class.name)_t *self = *self_p;
        zstr_send (self->pipe, "STOP");
        char *string = zstr_recv (self->pipe);
        free (string);
        zctx_destroy (&self->ctx);
        free (self);
        *self_p = NULL;
    }
}


//  --------------------------------------------------------------------------
//  Load client configuration data

void
$(class.name)_configure ($(class.name)_t *self, const char *config_file)
{
    zstr_sendm (self->pipe, "CONFIG");
    zstr_send  (self->pipe, config_file);
}


//  --------------------------------------------------------------------------
//  Set one configuration key value

void
$(class.name)_setoption ($(class.name)_t *self, const char *path, const char *value)
{
    zstr_sendm (self->pipe, "SETOPTION");
    zstr_sendm (self->pipe, path);
    zstr_send  (self->pipe, value);
}


//  --------------------------------------------------------------------------
//  Open connection to server

void
$(class.name)_connect ($(class.name)_t *self, const char *endpoint)
{
    zstr_sendm (self->pipe, "CONNECT");
    zstr_send  (self->pipe, endpoint);
}


//  --------------------------------------------------------------------------
//  Wait for message from API

zmsg_t *
$(class.name)_recv ($(class.name)_t *self)
{
    zmsg_t *msg = zmsg_recv (self->pipe);
    return msg;
}


//  --------------------------------------------------------------------------
//  Return API pipe handle for polling

void *
$(class.name)_handle ($(class.name)_t *self)
{
    return self->pipe;
}


.for class.method
//  --------------------------------------------------------------------------

$(ctype)
$(class.name)_$(name:c) ($(class.name)_t *self\
.   method.send = "send"
.   for argument
.       method.send = "sendm"
.       if last ()
.           argument.send = "sendf"
.       else
.           argument.send = "sendfm"
.       endif
.       if type = "string"
.           argument.format = "%s"
, const char *$(name)\
.       elsif type = "number"
.           argument.format = "%ld"
, long $(name)\
.       else
.           echo "E: we didn't add support for $(type)s in methods"
.       endif
.   endfor
)
{
    assert (self);
.   for argument where type = "string"
    assert ($(name));
.   endfor
    zstr_$(send) (self->pipe, "$(NAME)");
.   for argument
.       if type = "string"
    zstr_$(send) (self->pipe, "$(format)", $(name));
.       elsif type = "number"
    zstr_$(send) (self->pipe, "$(format)", $(name));
.       endif
.   endfor
.   if defined (method.return)
    char *reply = zstr_recv (self->pipe);
.       if return = "string"
    return reply;
.       else
    int rc = atoi (reply);
    free (reply);
    return rc;
.       endif
.   endif
}


.endfor
.#  Inherit defaults state, if any, to all other states
.for class.state as dstate where name = "defaults"
.   for event as devent
.       for class.state where count (event, name = devent.name) = 0
.           copy devent to state
.       endfor
.   endfor
.   delete dstate
.endfor
//  ---------------------------------------------------------------------
//  State machine constants

typedef enum {
.for class.state
    $(name:c)_state = $(index ())$(last ()??"" ?",")
.   for event
.       for class.event as cevent where cevent.name = event.name
.       else
.           if "$(name:)" = "$(NAME)"
.               event.external = 1
.           endif
.           copy event to class
.       endfor
.   endfor
.endfor
} state_t;

typedef enum {
    terminate_event = -1,
.for class.event
    $(name:c)_event = $(index ())$(last ()??"" ?",")
.endfor
} event_t;

.if switches.animate ?= 1
//  Names for animation
static char *
s_state_name [] = {
    "",
.for class.state
    "$(Name)"$(last ()??"" ?",")
.endfor
};

static char *
s_event_name [] = {
    "",
.for class.event
    "$(name:)"$(last ()??"" ?",")
.endfor
};

.endif

//  Forward declarations
typedef struct _client_t client_t;

.for class.declare
$(string.trim (declare.?''):)

.endfor

//  ---------------------------------------------------------------------
//  Context for the client thread

struct _client_t {
    //  Properties accessible to client actions
    event_t next_event;         //  Next event
.for class.self
.   for context
    $(string.trim (context.?''):block                                           )
.   endfor
.endfor
    
    //  Properties you should NOT touch
    zctx_t *ctx;                //  Own CZMQ context
    void *pipe;                 //  Socket to back to caller
    void *dealer;               //  Socket to talk to server
    bool stopped;               //  Has client stopped?
    fmq_config_t *config;       //  Configuration tree
    state_t state;              //  Current state
    event_t event;              //  Current event
    $(codec)_t *request;        //  Next message to send
    $(codec)_t *reply;          //  Last received reply
    int heartbeat;              //  Heartbeat interval
    int64_t expires_at;         //  Server expires at
};

static void
client_config_self (client_t *self)
{
    //  Get standard client configuration
    self->heartbeat = atoi (
        fmq_config_resolve (self->config, "client/heartbeat", "1")) * 1000;
}

static client_t *
client_new (zctx_t *ctx, void *pipe)
{
    client_t *self = (client_t *) zmalloc (sizeof (client_t));
    self->ctx = ctx;
    self->pipe = pipe;
    self->config = fmq_config_new ("root", NULL);
    client_config_self (self);
.for class.self
.   for construct
    $(string.trim (construct.?''):block                                         )
.   endfor
.endfor
    return self;
}

static void
client_destroy (client_t **self_p)
{
    assert (self_p);
    if (*self_p) {
        client_t *self = *self_p;
        fmq_config_destroy (&self->config);
        $(codec)_destroy (&self->request);
        $(codec)_destroy (&self->reply);
.for class.self
.   for destruct
        $(string.trim (destruct.?''):block                                      )
.   endfor
.endfor
        free (self);
        *self_p = NULL;
    }
}

//  Apply configuration tree:
//   * apply client configuration
//   * print any echo items in top-level sections
//   * apply sections that match methods

static void
client_apply_config (client_t *self)
{
    //  Apply echo commands and class methods
    fmq_config_t *section = fmq_config_child (self->config);
    while (section) {
        fmq_config_t *entry = fmq_config_child (section);
        while (entry) {
            if (streq (fmq_config_name (entry), "echo"))
                zclock_log (fmq_config_value (entry));
            entry = fmq_config_next (entry);
        }
.for class.method
        if (streq (fmq_config_name (section), "$(name:c)")) {
.   for argument
.       if type = "string"
            char *$(name) = fmq_config_resolve (section, "$(name)", "?");
.       elsif type = "number"
            long $(name) = atoi (fmq_config_resolve (section, "$(name)", ""));
.       endif
.   endfor
            $(string.trim (method.?''):block                                    )
        }
.   if !last ()
        else
.   endif
.endfor
        section = fmq_config_next (section);
    }
    client_config_self (self);
}

.macro output_event_body
.   for action
.       if name = "send"
.           if switches.animate ?= 1
                    zclock_log ("C:    + send $(MESSAGE:C)");
.           endif
                    $(codec)_id_set (self->request, $(CODEC)_$(MESSAGE:C));
.if switches.trace ?= 1
                    zclock_log ("Send request to server");
                    $(codec)_dump (self->request);
.endif
                    $(codec)_send (&self->request, self->dealer);
                    self->request = $(codec)_new (0);
.       else
.           if switches.animate ?= 1
                    zclock_log ("C:    + $(name)");
.           endif
                    $(name:c) (self);
.           if count (class.action, name = -1.name) = 0
.                echo 'E: you need to add <action name="$(name)">'
.           endif
.       endif
.   endfor
.   if defined (event.next)
                    self->state = $(next:c)_state;
.   endif
.endmacro
.#
.for class.action
.   if first ()
//  Custom actions for state machine

.   endif
static void
$(name:c) (client_t *self)
{
    $(string.trim (action.?''):block                                            )
}

.endfor
//  Execute state machine as long as we have events

static void
client_execute (client_t *self, int event)
{
    self->next_event = event;
    while (self->next_event) {
        self->event = self->next_event;
        self->next_event = 0;
.if switches.animate ?= 1
        zclock_log ("C: %s:", s_state_name [self->state]);
        zclock_log ("C: (%s)", s_event_name [self->event]);
.endif
        switch (self->state) {
.for class.state
            case $(name:c)_state:
.   for event where name <> "$other"
.       if index () > 1
                else
.       endif
                if (self->event == $(name:c)_event) {
.       output_event_body ()
                }
.   endfor
.   for event where name = "$other"
                else {
                    //  Process all other events
.       output_event_body ()
                }
.   endfor
                break;

.endfor
        }
.if switches.animate ?= 1
        zclock_log ("C:      -------------------> %s", s_state_name [self->state]);
.endif
        if (self->next_event == terminate_event) {
            self->stopped = true;
            break;
        }
    }
}

//  Restart client dialog from zero

static void
client_restart (client_t *self, char *endpoint)
{
    //  Reconnect to new endpoint if specified
    if (endpoint)  {
        if (self->dealer)
            zsocket_destroy (self->ctx, self->dealer);
        self->dealer = zsocket_new (self->ctx, ZMQ_DEALER);
        zsocket_connect (self->dealer, endpoint);
    }
    //  Clear out any previous request data
    $(codec)_destroy (&self->request);
    self->request = $(codec)_new (0);

    //  Restart dialog state machine from zero
.for class.state where item () = 1
    self->state = $(name:c)_state;
.endfor
    self->expires_at = 0;

    //  Application hook to reinitialize dialog
    //  Provides us with an event to kick things off
    initialize_the_client (self);
    client_execute (self, self->next_event);
}

static void
control_message (client_t *self)
{
    zmsg_t *msg = zmsg_recv (self->pipe);
    char *method = zmsg_popstr (msg);
.for class.method
    if (streq (method, "$(NAME)")) {
.   for argument
.       if type = "string"
        char *$(name) = zmsg_popstr (msg);
.       elsif type = "number"
        char *$(name)_string = zmsg_popstr (msg);
        long $(name) = atoi ($(name)_string);
        free ($(name)_string);
.       endif
.   endfor
        $(string.trim (method.?''):block                                        )
.   for method.return
        $(string.trim (return.?''):block                                        )
.   endfor
.   for argument where type = "string"
        free ($(name));
.   endfor
    }
    else
.endfor
    if (streq (method, "CONNECT")) {
        char *endpoint = zmsg_popstr (msg);
        client_restart (self, endpoint);
        free (endpoint);
    }
    else
    if (streq (method, "CONFIG")) {
        char *config_file = zmsg_popstr (msg);
        fmq_config_destroy (&self->config);
        self->config = fmq_config_load (config_file);
        if (self->config)
            client_apply_config (self);
        else {
            printf ("E: cannot load config file '%s'\\n", config_file);
            self->config = fmq_config_new ("root", NULL);
        }
        free (config_file);
    }
    else
    if (streq (method, "SETOPTION")) {
        char *path = zmsg_popstr (msg);
        char *value = zmsg_popstr (msg);
        fmq_config_path_set (self->config, path, value);
        client_config_self (self);
        free (path);
        free (value);
    }
    else
    if (streq (method, "STOP")) {
        zstr_send (self->pipe, "OK");
        self->stopped = true;
    }
    free (method);
    zmsg_destroy (&msg);

    if (self->next_event)
        client_execute (self, self->next_event);
}

static void
server_message (client_t *self)
{
    if (self->reply)
        $(codec)_destroy (&self->reply);
    self->reply = $(codec)_recv (self->dealer);
    if (!self->reply)
        return;         //  Interrupted; do nothing
.if switches.trace ?= 1

    zclock_log ("Received reply from server");
    $(codec)_dump (self->reply);
.endif
    
.   for class.event where external ?= 1
.   if index () > 1
    else
.   endif
    if ($(codec)_id (self->reply) == $(CODEC)_$(NAME:C))
        client_execute (self, $(name:c)_event);
.   endfor

    //  Any input from server counts as activity
    self->expires_at = zclock_time () + self->heartbeat * 2;
}


//  Finally here's the client thread itself, which polls its two
//  sockets and processes incoming messages

static void
client_thread (void *args, zctx_t *ctx, void *pipe)
{
    client_t *self = client_new (ctx, pipe);
    while (!self->stopped && !zctx_interrupted) {
        //  Build structure each time since self->dealer can change
        zmq_pollitem_t items [] = {
            { self->pipe, 0, ZMQ_POLLIN, 0 },
            { self->dealer, 0, ZMQ_POLLIN, 0 }
        };
        int poll_size = self->dealer? 2: 1;
        if (zmq_poll (items, poll_size, self->heartbeat * ZMQ_POLL_MSEC) == -1)
            break;              //  Context has been shut down

        //  Process incoming messages; either of these can
        //  throw events into the state machine
        if (items [0].revents & ZMQ_POLLIN)
            control_message (self);

        if (items [1].revents & ZMQ_POLLIN)
            server_message (self);

        //  Check whether server seems dead
        if (self->expires_at && zclock_time () >= self->expires_at)
            client_restart (self, NULL);
    }
    client_destroy (&self);
}


//  --------------------------------------------------------------------------
//  Selftest

int
$(class.name)_test (bool verbose)
{
    printf (" * $(class.name): ");

    $(class.name)_t *self;
.for class.selftest
    //  Run selftest using '$(config?'')' configuration
    self = $(class.name)_new ();
    assert (self);
.   if defined (config)
    $(class.name)_configure (self, "$(config:)");
.   endif
.   for init
    $(string.trim (init.?''):block                                              )
.   endfor
    $(class.name)_destroy (&self);

.endfor
    printf ("OK\\n");
    return 0;
}
